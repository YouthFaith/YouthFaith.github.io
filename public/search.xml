<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Advanced Knowledge of C Language</title>
      <link href="/2018/12/07/AdvancedKnowledgeofC/"/>
      <url>/2018/12/07/AdvancedKnowledgeofC/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Practice makes perfect. </p></blockquote><h2 id="Type-alias"><a href="#Type-alias" class="headerlink" title="Type alias"></a>Type alias</h2><h3 id="Usage-of-typedef"><a href="#Usage-of-typedef" class="headerlink" title="Usage of typedef"></a>Usage of typedef</h3><ol><li>Function time: compile</li><li>Define another name for a data type: <code>typedef OldDataType NewDataType;</code></li><li>Define a new simple alias for a complex declaration: <code>typedef DataTypeExpressionWithAlias;</code>. For example, <code>void (*a)(void);</code> $\Rightarrow$ <code>typedef void (*Alias)(void); Alias a;</code></li></ol><h3 id="Usage-of-define"><a href="#Usage-of-define" class="headerlink" title="Usage of define"></a>Usage of define</h3><ol><li>Function time: preprocess</li><li>Replace old string with new string: <code>#define NewString OldString</code></li></ol><a id="more"></a><h2 id="Basic-knowledge-of-pointer"><a href="#Basic-knowledge-of-pointer" class="headerlink" title="Basic knowledge of pointer"></a>Basic knowledge of pointer</h2><h3 id="Introduction-of-pointer"><a href="#Introduction-of-pointer" class="headerlink" title="Introduction of pointer"></a>Introduction of pointer</h3><ol><li>Role of pointer:<ul><li>Represent complex data structures effectively</li><li>Easy to use arrays and stings</li><li>Make function parameter passing more flexible</li><li>Able to deal with memory address</li></ul></li><li>Concept of pointer:<ul><li>The memory is addressed in bytes and one memory cell occupies one byte.</li><li>One variable, whose address is represented by the address of the first byte, corresponds to one storage cell and occupies a certain number of bytes.</li><li>Pointer is a variable, whose value is the address of another variable it points to. And a pointer variable is simply called a pointer. </li></ul></li><li>Definition of pointer:<ul><li>Format: <code>DataType *PointerName;</code>, where <strong>DataType</strong> represents type of variable which the pointer points to.  </li><li><code>*</code> is pointer operator.</li><li>Size: No matter what a pointer point to, its size is the same as one machine word-length.</li></ul></li><li>Initialization of point:<ul><li>Format: <code>PointName = NULL;</code>, where <strong>NULL</strong> is equal to zero and it indicates the pointer points to nothing. <code>PointerName = &amp;VariableNAme;</code>.</li><li>Of course, we can define and initialize at the same time.</li></ul></li><li>Addition and subtraction operation: We can move the pointer by add and sub operation.</li><li>Name of array:<ul><li>Name of array is a storage cell address of the first element address in the array.</li><li>Name of array is a constant and disable to be reassigned.</li><li>We can get another element in the array using offset.</li></ul></li><li>Traversal method of array:<ul><li>Subscript method: <code>ArrayName[Subscript]</code></li><li>Pointer method: <code>*(ArrayName+Subsript)</code></li></ul></li></ol><h3 id="Segmentation-fault"><a href="#Segmentation-fault" class="headerlink" title="Segmentation fault"></a>Segmentation fault</h3><ol><li><p>Concept and cause of segmentation fault: </p><ul><li><p>A segmentation fault occurs when a program attempts to access a memory location that it is not allowed to access, or attempts to access a memory location in a way that is not allowed (e.g., attempts to write to a read-only location, or to overwrite part of the operating system). </p></li><li><p>Common case: overwrite nil pointer, access a nonexistent memory location, access a system-protected memory location and modify variables in the constant area.</p></li></ul></li><li><p>Common ways to avoid segmentation fault:</p><ul><li>Better to initialize variables when defining them</li><li>Do not overstep the boundary of any array </li><li>Avoid to overwrite some protected or nonexistent memory cell</li></ul></li></ol><h3 id="Way-to-transfer-function-parameters"><a href="#Way-to-transfer-function-parameters" class="headerlink" title="Way to transfer function parameters"></a>Way to transfer function parameters</h3><ol><li>By value:<ul><li>Data transfer is one-way. In a word, we can but transfer the value of aruguments to parameters and not if we don’t.</li><li>In the transferring process, the value of aruguments doesn’t change with changing the value of parameters.</li></ul></li><li>By address(pointer):<ul><li>We can modify the variable value actual parameter pointer points to by formal parameter pointer.  </li></ul></li></ol><h3 id="Pointers-to-pointers"><a href="#Pointers-to-pointers" class="headerlink" title="Pointers to pointers"></a>Pointers to pointers</h3><ol><li><p>Concept of pointers to pointers: In a word, it is a pointer to a pointer and its value is the address of a pointer.</p></li><li><p>Definition and initialization of pointers to pointers: <code>DataType **Pointer2Name = &amp;Pointer1Name;</code></p></li></ol><h3 id="Constant-pointer-and-pointer-constant"><a href="#Constant-pointer-and-pointer-constant" class="headerlink" title="Constant pointer and pointer constant"></a>Constant pointer and pointer constant</h3><ol><li><p>Concept of constant pointer: In short, it is a pointer to a constant and the variable value it points to can not be changed.</p></li><li><p>Definition of constant pointer: <code>DataType const *PointerName</code></p></li><li><p>Usage of constant pointer: It is usually used to deny to modify the variable value the aruguments points to when calling function. </p></li><li><p>Concept of pointer constant: In short, it is a pointer whose value can’t be changed while the variable value it points to can be changed.</p></li><li><p>Definition of pointer constant: <code>DataType *const PointerName</code></p></li></ol><h2 id="Advanced-knowledge-of-function"><a href="#Advanced-knowledge-of-function" class="headerlink" title="Advanced knowledge of function"></a>Advanced knowledge of function</h2><h3 id="Memory-management-mechanism-in-Linux"><a href="#Memory-management-mechanism-in-Linux" class="headerlink" title="Memory management mechanism in Linux"></a>Memory management mechanism in Linux</h3><ol><li>Von Neumann System: calculator, controller, storage, input device and output device.</li><li>Virtual memory: <ul><li>System allocates a virtual memory area to make processes independent with virtual addresses.</li><li><code>/proc/cpuinfo</code>: a collection of CPU and system architecture dependent items, for each supported  architecture  a  different list. A 64-bit computers allocate 48 bits of virtual memory space(50% user space: <code>0x0000000000000000~0x00007FFFFFFFFFFF</code> and 50 % kernel space: <code>0xFFFF800000000000~ 0xFFFFFFFFFFFFFFFF</code>).</li><li><code>/proc/[pid]/maps</code>: a  file containing the currently mapped memory regions and their access permissions.<ul><li><code>vsyscall</code>: virtual system call</li><li><code>vdso</code>: virtual dynamically linked shared object</li><li><code>stack</code>: the  initial  process’s  (also  known  as  the  main  thread’s) stack<ul><li>Local variable</li><li>Function parameter</li><li>Function return address</li></ul></li><li><code>xxx.so</code>: shared memory mapped area</li><li><code>heap</code>: the process’s heap<ul><li>Dynamic memory allocation, like <code>malloc</code> and <code>relloc</code></li></ul></li><li><code>data segment</code>: static storage area(global variable and static variable) and constant area  </li><li><code>code segment</code>: code area</li></ul></li><li>Segment-page memory management mechanism:<ul><li>Virtual address contains segment number, page number and page offset.</li><li>Dynamic mapping between virtual and physical addresses.</li><li><code>getconf PAGE_SIZE</code>: view size of page</li></ul></li></ul></li></ol><h3 id="Scope-and-storage-type"><a href="#Scope-and-storage-type" class="headerlink" title="Scope and storage type"></a>Scope and storage type</h3><ol><li><p>Classification of scope:</p><ul><li><p><code>global variable</code>: valid from where they are defined until the end of the program file(file scope).</p></li><li><p><code>local variable</code>: valid in function body or statement block(function scope or code block scope)</p></li></ul></li><li>Storage type and link attribute of variable:<ul><li><code>auto---none</code>: Local variables are valid in a function during a period of the function calling and not initialized by default, generating random values. </li><li><code>static---internal</code>: Static variables are always valid in a local area(one function or one source file) and lives during the whole program execution. It is initialized by default once.</li><li><code>extern(global)---external</code>: Its scope and life cycle are the whole program, and it is initialized by default once.</li><li><code>register</code>: Auto local variable is stored in the CPU register, accessed faster than memory and not initialized by default.</li></ul></li><li>Internal and external function:<ul><li>Internal function: <code>static TataType FunctionName(FormalParameterList);</code>, only called in local source file.</li><li>External function: <code>(extern) TataType FunctionName(FormalParameterList);</code>, able to be called by other source file.</li></ul></li><li>Usage of <code>extern</code>:<ul><li>Declare/quote external variable to expand the scope of the external variable<ul><li>Declare external variable in a source file: to use the variable in the same file before definition </li><li>Quote external variable in multiple source files: to use the variable in the other file </li></ul></li></ul></li></ol><h3 id="Function-Calling"><a href="#Function-Calling" class="headerlink" title="Function Calling"></a>Function Calling</h3><ol><li><p>Calling process of function is actually an operation of the stack space and we use the stack space to store the information about the called function:</p><ul><li>Establish stack space of the called function</li><li>Protect the running state and result address of the calling function</li><li>Transfer aruguments to parameters</li><li>Execute the statement in called function body</li><li>Pass control or return value to the calling function</li><li>Free the stack space of the called function</li></ul></li><li><p>Recursive call:</p><ul><li>Concept: A function calls itself inside its function body.</li><li>Feature:<ul><li>There are constraints and the recursion does not continue when the constraints are met.</li><li>Each recursive call gets closer and closer to the constraint.</li></ul></li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Converts a decimal integer to a character and outputs it through a recursive call</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binary_to_ascii</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> temp;</span><br><span class="line">    temp = value / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(!temp)</span><br><span class="line">        binary_to_ascii(temp);</span><br><span class="line">    <span class="built_in">putchar</span>(value % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">    binary_to_ascii(number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fibonacci</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fibonacci(n<span class="number">-2</span>) + fibonacci(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, fibonacci(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example three</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Factorial</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The factorial of %d: %d.\n"</span>, n, factorial(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Introduction-of-function-pointer"><a href="#Introduction-of-function-pointer" class="headerlink" title="Introduction of function pointer"></a>Introduction of function pointer</h3><ol><li><p>Every function all has a entry address, called function pointer.</p></li><li><p>Format of function pointer:</p><ul><li><p>Definition:  <code>DataType (*FunctionPointerName)(FormalParameterList);</code></p></li><li><p>Initialization: <code>FunctionPointerName = FunctionName;</code></p></li><li><p>Calling: <code>FunctionPointerName(ActualParameterList);</code> or </p><p><code>(*FunctionPointerName)(ActualParameterList);</code></p></li></ul></li><li><p>Callback function:</p><ul><li>Concept: a function called through function pointer</li><li>Instead of being called directly by the implementer of the function, a callback function is called by another party when a particular event or condition occurs and is used to respond to that event or condition.</li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Use callback functions to call different sorting algorithms to sort array elements</span></span><br><span class="line"><span class="comment">//src/callback_sort_test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"callback_sort.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_data</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_data</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* *argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>, choose = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"0:bubble_sort\n1:select_sort\nWhich sorting method would you like to</span></span><br><span class="line"><span class="string"> test:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choose);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"How many numbers would you like to input:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> *data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n * siz**EOF**(<span class="keyword">int</span>));</span><br><span class="line">    init_data(data, n);</span><br><span class="line">    <span class="keyword">if</span>(choose==<span class="number">0</span>)</span><br><span class="line">    data_sort(data, n, bubble_sort, out_data);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        data_sort(data, n, select_sort, out_data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//include/callback_sort.h</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">data_sort</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>, <span class="keyword">void</span> (*)(<span class="keyword">int</span>*, <span class="keyword">int</span>), <span class="keyword">void</span>(*)(<span class="keyword">int</span>*, <span class="keyword">int</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//src/callback_sort.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>; j&gt;i; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*(p+j<span class="number">-1</span>)&gt;*(p+j))&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = *(p+j);</span><br><span class="line">                *(p+j) = *(p+j<span class="number">-1</span>);</span><br><span class="line">                *(p+j<span class="number">-1</span>) = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*(p+j)&lt;*(p+min))</span><br><span class="line">                min = j;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = *(p+min);</span><br><span class="line">            *(p+min) = *(p+i);</span><br><span class="line">            *(p+i) = temp;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">data_sort</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> n, <span class="keyword">void</span> (*sort)(<span class="keyword">int</span>*, <span class="keyword">int</span>), <span class="keyword">void</span>(*out)(<span class="keyword">int</span>*, <span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(p, n);</span><br><span class="line">    out(p, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Use function pointer array to realize calculator function</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> i, <span class="keyword">float</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sub</span><span class="params">(<span class="keyword">float</span> i, <span class="keyword">float</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i-j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">mul</span><span class="params">(<span class="keyword">float</span> i, <span class="keyword">float</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i*j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">div</span><span class="params">(<span class="keyword">float</span> i, <span class="keyword">float</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i/j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_menu</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1:add two numbers\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2:sub two numbers\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"3:mul two numbers\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"4:div two numbers\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0:quit\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">float</span> (*fun_array[])(<span class="keyword">float</span>, <span class="keyword">float</span>) = &#123;add, sub, mul, div&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cmd=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        show_menu();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cmd);</span><br><span class="line">        <span class="keyword">if</span>(!cmd)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Please input number1 and number2:"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;i, &amp;j);</span><br><span class="line">            <span class="keyword">float</span> res = (**(fun_array+cmd<span class="number">-1</span>))(i, j);</span><br><span class="line">            <span class="comment">//float res = fun_array[cmd-1](i, j);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Result:%g\n"</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Introduction-of-variable-argument-list"><a href="#Introduction-of-variable-argument-list" class="headerlink" title="Introduction of variable argument list"></a>Introduction of variable argument list</h3><ol><li><p>Concept of variable argument list: The numbers of function argument are variable, such as this function prototype: <code>int scanf(const char *format, ...);</code>.</p></li><li><p>Usage of variable argument list: implemented with three macros(<code>va_start</code>, <code>va_arg</code>, <code>va_end</code>) and a data type(<code>va_list</code>).</p><ul><li><code>void va_start(va_list ap, last);</code>: initialize variable argument list</li><li><code>type va_arg(va_list ap, type);</code>: return the value of the next parameter</li><li><code>void va_end(va_list ap);</code>: free variable argument list</li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Use the variable parameter list to calculate the average value of a group of Numbers</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">int</span> n_value, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list var_arg;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    va_start(var_arg, n_value);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>; count&lt;n_value;count++)&#123;</span><br><span class="line">        sum += va_arg(var_arg, <span class="keyword">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(var_arg);</span><br><span class="line">    <span class="keyword">return</span> sum / n_value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> aver = average(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aver: %g.\n"</span>, aver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Knowledge-of-string"><a href="#Knowledge-of-string" class="headerlink" title="Knowledge of string"></a>Knowledge of string</h2><h3 id="Introduction-of-character-array"><a href="#Introduction-of-character-array" class="headerlink" title="Introduction of character array"></a>Introduction of character array</h3><ol><li>Concept of character array: an array of characters</li><li>Initialization of character array: <code>char ArrayName[] = { CharSequence };</code>. When we initialize character array in this way, <code>&#39;\0&#39;</code> is supposed to be used to end the array. <ul><li><code>char array[] = {&#39;Y&#39;,&#39;o&#39;,&#39;u&#39;,&#39;t&#39;,&#39;h&#39;,&#39;F&#39;, &#39;a&#39;, &#39;i&#39;, &#39;t&#39;,&#39;h&#39;, &#39;\0&#39;}</code> or <code>{&quot;YouthFaith&quot;}</code> or  <code>&quot;YouthFaith&quot;;</code> and the length is 10 while the size is 11 bytes.</li></ul></li><li>Input and output of character array once: <ul><li><code>scanf(&quot;%s&quot;, ArrayName);</code></li><li><code>printf(&quot;%s&quot;, ArrayName);</code></li></ul></li></ol><h3 id="Introduction-of-string"><a href="#Introduction-of-string" class="headerlink" title="Introduction of string"></a>Introduction of string</h3><ol><li><p>Concept of string: It is any sequence of characters enclosed in double quotation marks or an array of characters ending with <code>&#39;\0&#39;</code>.</p></li><li><p>Pointer to string: <code>char *PointerName = &quot; StringConstant &quot;;</code> and <strong>StringConstant</strong> which can’t be modified but can be read, is stored into constant area in data segment.</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calculate the average length of words in a sentence</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> letter=<span class="number">0</span>, word=<span class="number">0</span>, flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">array</span>[<span class="number">30</span>] = <span class="string">"\0"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a sentence:"</span>);</span><br><span class="line">    fgets(<span class="built_in">array</span>, siz**EOF**(<span class="built_in">array</span>), <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(<span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">' '</span> || ch == <span class="string">'\t'</span>)&#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!flag &amp;&amp; ch != <span class="string">' '</span> &amp;&amp; ch != <span class="string">'\t'</span>)&#123;</span><br><span class="line">            word++;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch != <span class="string">' '</span> &amp;&amp; ch != <span class="string">'\t'</span>)</span><br><span class="line">            letter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Average word length:%g.\n"</span>, (<span class="keyword">float</span>)letter/word);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Common system functions about dealing with string: ought to include header file <code>stdio.h</code> or <code>string.h</code></p><ul><li><code>int puts(const char *s);</code> writes the string <code>s</code> and a trailing newline to stdout.</li><li><code>char *gets(char *s);</code> reads a line from stdin into the buffer pointed to by <code>s</code> until either a terminating newline or <strong>EOF</strong>, which it replaces with a null byte(<code>&#39;\0&#39;</code>).</li><li><code>size_t strlen(const char *s);</code> calculates the length of the string pointed to by <code>s</code>, excluding the terminating null byte (<code>&#39;\0&#39;</code>).</li><li><code>char *strcpy(char *dest, const char *src);</code> copies the string pointed to by <code>src</code>, including the terminating null byte (<code>&#39;\0&#39;</code>), to the buffer pointed to by <code>dest</code>.</li><li><code>char *strncpy(char *dest, const char *src, size_t n);</code> is similar to <code>strcpy</code>, except that at most n bytes of <code>src</code> are copied.</li><li><code>char *strcat(char *dest, const char *src);</code> appends the <code>src</code> string to the <code>dest</code> string, overwriting the terminating null byte (<code>&#39;\0&#39;</code>) at the end of <code>dest</code>, and then adds a terminating null byte.</li><li><code>char *strncat(char *dest, const char *src, size_t n);</code> is similar to <code>strcat</code> except that it will use at most n bytes from <code>src</code> and <code>src</code> does not need to be null-terminated if it contains n or more bytes.</li><li><code>int strcmp(const char *s1, const char *s2);</code> compares the two strings <code>s1</code> and <code>s2</code> according to ASCII.</li><li><code>int strncmp(const char *s1, const char *s2, size_t n);</code> is similar to <code>strcmp</code>, except it compares only the first (at most) n bytes of <code>s1</code> and <code>s2</code>.</li><li><code>char *strtok(char *str, const char *delim);</code> breaks a string into a sequence of zero or more nonempty tokens.</li><li><code>char *strchr(const char *s, int c);</code> returns a pointer to the first occurrence of the character <code>c</code> in the string <code>s</code>.</li><li><code>char *strrchr(const char *s, int c);</code> returns a pointer to the last occurrence of the character <code>c</code> in the string <code>s</code>.</li></ul></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Custom function implementation string copy </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">myStrcpy</span><span class="params">(<span class="keyword">char</span> *to, <span class="keyword">char</span> *from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to == <span class="literal">NULL</span> || from == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> *p = to;</span><br><span class="line">    <span class="keyword">for</span>(; *from!=<span class="string">'\0'</span>; from++, to++)&#123;</span><br><span class="line">        *to = *from;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *from = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> to[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">char</span> *p = myStrcpy(to, from);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"from: %s, to: %s\n."</span>, p, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Standard-library-function-in-C-language"><a href="#Standard-library-function-in-C-language" class="headerlink" title="Standard library function in C language"></a>Standard library function in C language</h2><h3 id="Common-functions-in-stdlib-h"><a href="#Common-functions-in-stdlib-h" class="headerlink" title="Common functions in stdlib.h"></a>Common functions in stdlib.h</h3><ol><li><code>int abs(int j);</code> and <code>long int labs(long int j);</code></li><li><code>int rand(void);</code> and <code>void srand(unsigned int seed);</code></li><li><code>int atoi(const char *nptr);</code> and <code>long atol(const char *nptr);</code></li><li><code>double atof(const char *nptr);</code></li></ol><h3 id="Common-functions-in-math-h"><a href="#Common-functions-in-math-h" class="headerlink" title="Common functions in math.h"></a>Common functions in math.h</h3><ol><li><code>double sin(double x);</code></li><li><code>double cos(double x);</code></li><li><code>double tan(double x);</code></li><li><code>double exp(double x);</code></li><li><code>double pow(double x, double y);</code></li></ol><h3 id="Common-functions-in-time-h"><a href="#Common-functions-in-time-h" class="headerlink" title="Common functions in time.h"></a>Common functions in time.h</h3><ol><li><code>time_t time(time_t *tloc);</code></li><li><code>char *ctime(const time_t *timep);</code></li></ol><h3 id="Case-study"><a href="#Case-study" class="headerlink" title="Case study"></a>Case study</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Implement the timer</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;number&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> duration = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(duration &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Duration error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">time_t</span> start, current;</span><br><span class="line">    time(&amp;start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Start time:%s"</span>, ctime(&amp;start));</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        time(&amp;current);</span><br><span class="line">    &#125;<span class="keyword">while</span>((current-start)!=duration);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Current time:%s"</span>, ctime(&amp;current));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Structure-and-union"><a href="#Structure-and-union" class="headerlink" title="Structure and union"></a>Structure and union</h2><h3 id="Introduction-of-structure"><a href="#Introduction-of-structure" class="headerlink" title="Introduction of structure"></a>Introduction of structure</h3><ol><li><p>Concept of structure: a collection of data of the same or different types</p></li><li><p>Declaration of structure: <code>struct StructName{ MemberList };</code> The system doesn’t allocate real memory at the time of declaration.</p></li><li><p>Definition of structure: </p><ul><li><code>struct StructName VariableName1, ... ,VariableNamen;</code></li><li><code>struct [StructName] { MemberList } VariableName1, ... ,VariableNamen;</code></li></ul></li><li><p>Initialization of structure: </p><ul><li><code>struct StructName VariableNamen = { MemberValueList }, ... ;</code></li><li><code>struct [StructName] { MemberList } VariableNamen = { MemberValueList }, ... ;</code></li></ul></li><li><p>Access of structure member: </p><ul><li>For structure variable: <code>StructName.MemberName</code></li><li>For structure pointer: <code>StructPointer-&gt;MemberName</code> or <code>(*StructPointer)-&gt;MemberName</code></li><li>Specially, structure member can be a structure pointer to itself for chain table and structure declaration can be incomplete to make different structures dependent on each other.</li></ul></li><li><p>Assignment of structure: <code>StructVariableName = AnotherStructVariableName;</code> or</p><p> <code>StructVariableName.MemberName = VariableValue;</code></p></li><li><p>Nest of structure:  <code>struct [StructName] { ... struct StructName VariableName ... };</code></p></li><li><p>Example one </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implement a clock </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">int</span> sec;</span><br><span class="line">&#125;Clock;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> start, current;</span><br><span class="line">    time(&amp;start);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        time(&amp;current);</span><br><span class="line">    &#125;<span class="keyword">while</span>((current-start)!=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(Clock *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;sec++;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;sec == <span class="number">60</span>)&#123;</span><br><span class="line">        p-&gt;sec = <span class="number">0</span>;</span><br><span class="line">        p-&gt;min++;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;min == <span class="number">60</span>)&#123;</span><br><span class="line">            p-&gt;min = <span class="number">0</span>;</span><br><span class="line">p-&gt;hour++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Clock *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, p-&gt;hour, p-&gt;min, p-&gt;sec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Clock c = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sec = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter how much time do you want to time(s):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sec);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sec; i++)&#123;</span><br><span class="line">        delay();</span><br><span class="line">        increment(&amp;c);</span><br><span class="line">        show(&amp;c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Byte-alignment"><a href="#Byte-alignment" class="headerlink" title="Byte alignment"></a>Byte alignment</h3><ol><li>Concept of byte alignment: The various types of data are arranged according to certain rules, rather than being stored sequentially one by one.</li><li>Specifies the number of byte alignments: <code>#pragma pack(Bytes)</code> and <code>#pragma pack()</code> </li><li>Rules: <ul><li>Basic data types are byte aligned to their size.</li><li>Structure data types are byte aligned to the maximum size of its member variables.</li><li>Specially, valid alignment value is the smaller one between self-defined and original ones. So, Members of a structure are supposed to be defined by type from small to large.</li></ul></li><li>Bit field: a member variable can be a bit in a structure.<ul><li>Definition of bit field: <code>DataType [BitFieldName]:Length</code></li><li>Thereamong, <code>Length</code> can’t exceed the size of <code>DataType</code>.</li></ul></li></ol><h3 id="Introduction-of-union"><a href="#Introduction-of-union" class="headerlink" title="Introduction of union"></a>Introduction of union</h3><ol><li>Concept of union: Different types of variables are stored in the same segment of memory.</li><li>Declaration of union: <code>union UnionName { UnionMemberList };</code></li><li>Initialization of union: must be the first member variable</li></ol><h2 id="Advanced-knowledge-of-pointer"><a href="#Advanced-knowledge-of-pointer" class="headerlink" title="Advanced knowledge of pointer"></a>Advanced knowledge of pointer</h2><h3 id="Untyped-pointer"><a href="#Untyped-pointer" class="headerlink" title="Untyped pointer"></a>Untyped pointer</h3><ol><li>Concept of untyped pointer: able to point to any type variable</li><li>Definition of untyped pointer: <code>void *PointerName</code></li><li>Usage of untyped pointer: <code>(DataType*)PointerName</code> If you want to get the value of the variable using an untyped pointer, you need to transform the untyped pointer to a typed pointer that matches the variable type.</li><li>Access to memory: <code>DataType *PointerName = (DataType*)MemoryAddress;</code></li></ol><h3 id="Two-dimensional-array"><a href="#Two-dimensional-array" class="headerlink" title="Two-dimensional array"></a>Two-dimensional array</h3><ol><li><p>Two-dimensional array address</p><ul><li>Row address: Subscript-th row address<ul><li><code>ArrayName + Subscript</code></li></ul></li><li>Column address: Subscript-th row first column address<ul><li><code>ArrayName[Subscript]</code> $\Rightarrow$ <code>*(ArrayName + Subsript)</code></li></ul></li><li>Element address:<ul><li><code>ArrayName[Row]+Column</code></li><li><code>*(ArrayName+Row)+Column</code></li><li><code>&amp;ArrayName[Row][Column]</code></li></ul></li><li>Element value:<ul><li><code>*(ArrayName[Row]+Column)</code></li><li><code>*(*(ArrayName+Row)+Column)</code></li><li><code>ArrayName[Row][Column]</code></li></ul></li><li>Specially, <code>*RowAddress</code> = <code>ColumnAddress</code>, <code>RowAddress</code> = <code>&amp;ColumnAddress</code></li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Usage of two-dimensional array address in function</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out1</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">3</span>], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*********out1*********\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out2</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*********out2*********"</span>);</span><br><span class="line">    <span class="keyword">int</span> *s = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(s=p; s&lt;p+size; s++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s-p)%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out3</span><span class="params">(<span class="keyword">int</span> (*p)[<span class="number">3</span>], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*********out3*********\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,*(*(p+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">            *(*(arr+i)+j) = rand()%<span class="number">90</span>+<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out1(arr, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    out2(*arr, <span class="number">9</span>);</span><br><span class="line">    out3(arr, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Pointer-array"><a href="#Pointer-array" class="headerlink" title="Pointer array"></a>Pointer array</h3><ol><li><p>Concept of pointer array: an array of pointer to other variables stored in other memory</p></li><li><p>Definition of pointer array: <code>DataType *ArrayName[] = { PointerList };</code></p></li><li><p>Secondary pointer can be used to point to the first address of pointer array.</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Input several student names from the keyboard and sort them</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outStudent</span><span class="params">(<span class="keyword">char</span> **p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>, *(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortStudent</span><span class="params">(<span class="keyword">char</span> **p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>; j&gt;i; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(*(p+j), *(p+j<span class="number">-1</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> *temp = *(p+j);</span><br><span class="line">                *(p+j) = *(p+j<span class="number">-1</span>);</span><br><span class="line">                *(p+j<span class="number">-1</span>) = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"How many students do you want to sort:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">char</span> **p = (<span class="keyword">char</span>**)<span class="built_in">malloc</span>(siz**EOF**(<span class="keyword">char</span>*) * n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input their score one by one:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="keyword">char</span> temp[MAX] = <span class="string">"\0"</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %s"</span>, temp);</span><br><span class="line">        *(p+i) = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(siz**EOF**(<span class="keyword">char</span>)*(<span class="built_in">strlen</span>(temp)+<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(*(p+i), temp);</span><br><span class="line">    &#125;</span><br><span class="line">    outStudent(p, n);</span><br><span class="line">    sortStudent(p, n);</span><br><span class="line">    outStudent(p, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Case-study-1"><a href="#Case-study-1" class="headerlink" title="Case study"></a>Case study</h3><ul><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//Implement a teaching information system</span></span><br><span class="line">  <span class="comment">//include/element.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">      <span class="keyword">int</span> id;</span><br><span class="line">      <span class="keyword">int</span> age;</span><br><span class="line">      <span class="keyword">float</span> salary;</span><br><span class="line">      <span class="keyword">char</span> *name;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">Teacher</span>;</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tracher</span>* <span class="title">PTeacher</span>;</span></span><br><span class="line">  <span class="comment">//include/teacher.h</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"element.h"</span></span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">uint_t</span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">uint_t</span> size)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(PTeacher)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">uint_t</span>, PTeacher)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">uint_t</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> PTeacher <span class="title">get</span><span class="params">(<span class="keyword">uint_t</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> uint_t <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">iterate</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//src/teacher.c</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlin.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teacher.h"</span></span></span><br><span class="line">  <span class="keyword">static</span> PTeacher <span class="built_in">list</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint_t</span> list_size;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint_t</span> counter;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> uint_t <span class="title">is_full</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> uint_t <span class="title">is_empty</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">uint_t</span> increment)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">uint_t</span> size)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="built_in">list</span> = (PTeacher)<span class="built_in">calloc</span>(size, siz**EOF**(Teacher));</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"create teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      list_size = size;</span><br><span class="line">      counter = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">      <span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">      list_size = <span class="number">0</span>;</span><br><span class="line">      counter = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Pteacher p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span> || p = <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"add teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(is_full())&#123;</span><br><span class="line">          resize(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">list</span>[counter++] = *p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">uint_t</span> index, PTeacher p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span> || p = <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"insert teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(is_full())&#123;</span><br><span class="line">          resize(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=counter; i&gt;index; i--)&#123;</span><br><span class="line">          <span class="built_in">list</span>[i] = <span class="built_in">list</span>[i<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">list</span>[index] = *p;</span><br><span class="line">      counter++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">uint_t</span> index)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"delete teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(is_empty())&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"teacher list is empty!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;counter<span class="number">-1</span>; i++)&#123;</span><br><span class="line">          <span class="built_in">list</span>[i] = <span class="built_in">list</span>[i+<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      counter--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">PTeacher <span class="title">get</span><span class="params">(<span class="keyword">uint_t</span> index)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"get teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">list</span> + index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">uint_t</span> size()</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">return</span> counter;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">iterate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"iterate teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;counter; i++)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"id:%d\tname:%s\tage:%d\tsalary:%2f\n"</span>,</span><br><span class="line">                (<span class="built_in">list</span>+i)-&gt;id, (<span class="built_in">list</span>+i)-&gt;name, (<span class="built_in">list</span>+i)-&gt;age, (<span class="built_in">list</span>+i)-&gt;salary);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> uint_t <span class="title">is_full</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> counter &gt;= list_size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> uint_t <span class="title">is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> counter == ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">uint_t</span> increment)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="built_in">list</span> = (PTeacher)<span class="built_in">realloc</span>(<span class="built_in">list</span>, (list_size+increment) * siz**EOF**(Teacher));</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"resize teacher error!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      list_size += increment;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//src/teacher_test.c</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teacher.h"</span></span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      PTeacher p = </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Dynamic-memory-allocation"><a href="#Dynamic-memory-allocation" class="headerlink" title="Dynamic memory allocation"></a>Dynamic memory allocation</h2><h3 id="Introduction-of-memory-allocation"><a href="#Introduction-of-memory-allocation" class="headerlink" title="Introduction of memory allocation"></a>Introduction of memory allocation</h3><ol><li>Static storage area: Memory allocation has been finished after program compiling, like global variable and static variable.</li><li>Stack area: Storage cell of local variable are created during function calling and they will be freed automatically as  function returns.</li><li>Heap area: Programmers can apply for any storage are in heap during runtime and free them manually with some functions like <code>malloc</code> or <code>relloc</code>.</li></ol><h3 id="Introduction-of-dynamic-memory-allocation"><a href="#Introduction-of-dynamic-memory-allocation" class="headerlink" title="Introduction of dynamic memory allocation"></a>Introduction of dynamic memory allocation</h3><ol><li><code>void *malloc(size_t size);</code>: allocates <strong>size</strong> bytes and returns a pointer to the allocated memory. The memory is not initialized.</li><li><code>void *calloc(size_t nmemb, size_t size);</code>: allocates memory for an array of <strong>nmemb</strong> elements of <strong>size</strong> bytes each and returns a pointer to the allocated memory. The memory is set to zero.</li><li><code>void *realloc(void *ptr, size_t size);</code>: changes the size of the memory block pointed to by <strong>ptr</strong> to <strong>size</strong> bytes. The contents will be unchanged in the range from the start of the region up to the minimum of the old and new sizes. If the new size is larger than the old size, the added memory will not  be initialized. If <strong>ptr</strong> is  NULL, then the call is equivalent to <code>malloc(size)</code>, for all values of size; if size is equal to zero, and <strong>ptr</strong> is not NULL, then the call is equivalent to <code>free(ptr)</code>.</li><li><code>void free(void *ptr);</code>: frees the memory space pointed to by <strong>ptr</strong>, which must have been returned by a previous call to <code>malloc()</code>, <code>calloc()</code>, or <code>realloc()</code>.</li></ol><h2 id="Preprocess-in-C-language"><a href="#Preprocess-in-C-language" class="headerlink" title="Preprocess in C language"></a>Preprocess in C language</h2><h3 id="Introduction-of-preprocess"><a href="#Introduction-of-preprocess" class="headerlink" title="Introduction of preprocess"></a>Introduction of preprocess</h3><ul><li>Concept of preproces: Preprocessing generally is considered as the process of generating binary code before the source code of a program is translated into object code. Typically, the program source code text is processed by a preprocessor, and the result is further compiled by the compiler core. This process does not parse the program’s source code, but it splits or divide the source code into specific units —- preprocessing tokens, to support language features.</li></ul><h3 id="Macro-substitution"><a href="#Macro-substitution" class="headerlink" title="Macro substitution"></a>Macro substitution</h3><ol><li>Format of macro: <code>#define NewString OldString</code>. <strong>NewString</strong> is replaced with <strong>OldString</strong> during preprocessing and it’s essentially a substitution of strings.</li><li>Predefined macro:<ul><li><code>__FILE__</code>: source file name</li><li><code>__LINE__</code>: line number during runtime</li><li><code>__DATE__</code>: current day in the form —- <strong>month day year</strong></li><li><code>__TIME__</code>: current time in the form —- <strong>hour:minite:second</strong> </li><li><code>__func__</code>: current called function name</li></ul></li></ol><h3 id="Conditional-compile"><a href="#Conditional-compile" class="headerlink" title="Conditional compile"></a>Conditional compile</h3><ol><li><p>Concept of conditional compile: Normally, every line of code is compiled. However, sometimes for the consideration of program code optimization, we want to compile only part of the contents. At this time, we need to add conditions in the program, and let the compiler compile the code that meets the conditions, and discard the code that does not meet the conditions.</p></li><li><p>Usage of conditional compile: <code>#if</code>, <code>#elif</code>, <code>#else</code>, <code>#ifndef</code>, <code>#ifdef</code>, <code>#define</code>, <code>#endif</code>, <code>#error</code>, <code>#line</code>, <code>#pragma</code></p></li></ol><h3 id="File-including"><a href="#File-including" class="headerlink" title="File including"></a>File including</h3><ol><li><p>Header file references are defined in double quotation marks and system header file references in angle brackets.</p></li><li><p>Lookup order of header files: the directory where the source files are located $\rightarrow$ the directory specified by <code>-I</code> $\rightarrow$ system environment path</p></li><li><p>Usually, conditional compile is used to prevent multiple inclusions, like <code>#ifndef ... #define ... #endif</code>.</p></li></ol><h2 id="File-system"><a href="#File-system" class="headerlink" title="File system"></a>File system</h2><h3 id="Introduction-of-file-system"><a href="#Introduction-of-file-system" class="headerlink" title="Introduction of file system"></a>Introduction of file system</h3><ol><li><p>Concept of file: a collection of information stored in a computer’s hard disk. From the user’s point of view, files can be divided into ordinary files and device files. According to  the way of file encoding, files are divided into text files and binary files.</p></li><li><p>Classification of file system:</p><ul><li>Buffered file system: The system automatically creates a buffer in the memory area for each file in use. Either reading data from disk to memory or writing data from memory to disk needs to go through a buffer. Generally, data is sent to a designated location only when the buffer is full. And buffered file system is called standard input and output.</li><li>Unbuffered file system: Buffers are not automatically set by the system, but by the user as needed. And unbuffered file system is called system input and output.</li></ul></li><li><p>Three standard stream:</p><ul><li><code>stdin(0)</code>: standard input keyboard</li><li><code>stdout(1)</code>: standard output screen</li><li><code>stderr(2)</code>: standard output screen</li></ul></li><li><p>File type structure:  declaration is in <struct_file.h></struct_file.h></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line">  <span class="keyword">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="keyword">void</span> *_freeres_buf;</span><br><span class="line">  <span class="keyword">size_t</span> __pad5;</span><br><span class="line">  <span class="keyword">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don't get into trouble again.  */</span></span><br><span class="line">  <span class="keyword">char</span> _unused2[<span class="number">15</span> * siz**EOF** (<span class="keyword">int</span>) - <span class="number">4</span> * siz**EOF** (<span class="keyword">void</span> *) - siz**EOF** (<span class="keyword">size_t</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Introduction-of-file-pointer"><a href="#Introduction-of-file-pointer" class="headerlink" title="Introduction of file pointer"></a>Introduction of file pointer</h3><ol><li><p>Definition of file pointer: <code>FILE *PointerName</code>. System automatically create a file type structure variable for it and return a pointer to it when we open a file. Program use this pointer to access file and get information. </p></li><li><p>Mode of file pointer: The argument mode points to a string beginning with one of the  following sequences (possibly followed by additional characters, as described below).</p><ul><li><code>r</code>: open text file for reading. The stream is positioned at the beginning of the file.</li><li><code>w</code>: truncate file to zero length or create text  file  for  writing. The stream is positioned at the beginning of the file.</li><li><code>a</code>: open  for  appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the  end of the file.</li><li><code>+</code>: open  for  reading  and writing</li><li><code>b</code>: The mode string can also include the letter <strong>b</strong> either as a last  character or as a character between the characters in any of the two-character strings described above. This is strictly for compatibility with <strong>C89</strong> and has no effect; the <strong>b</strong> is ignored on all POSIX conforming systems, including Linux. (Other systems may treat text files and binary files differently, and adding the <strong>b</strong> may be a good idea if you do I/O to a binary file and expect that your program may be ported to non-UNIX environments.)</li></ul></li><li><p>Common functions about file pointer:</p><ul><li><code>FILE *fopen(const char *pathname, const char *mode);</code>: open the file whose name is the string pointed to by <strong>pathname</strong> and associates a stream with it. </li><li><code>int fclose(FILE *stream);</code>: flush the stream pointed to by <strong>stream</strong>(writing any buffered output data using fflush and closes the underlying file descriptor.</li><li><code>long ftell(FILE *stream);</code>: obtain the current value of the file position indicator for the stream pointed to by <strong>stream</strong>.</li><li><code>int fgetc(FILE *stream);</code>: read the next character from <strong>stream</strong> and returns it as an <strong>unsigned char</strong> cast to an <strong>int</strong>, or <strong>EOF</strong> on end of file or error.</li><li><code>int fputc(int c, FILE *stream);</code>: write the character <strong>c</strong>, cast to an <strong>unsigned char</strong>, to <strong>stream</strong>.</li><li><code>char *fgets(char *s, int size, FILE *stream);</code>: read in at most one less than <strong>size</strong> characters from <strong>stream</strong> and stores them into the buffer pointed to by <strong>s</strong>. Reading stops after an <strong>EOF</strong> or a newline. If a <strong>newline</strong> is read, it is stored into the buffer. A terminating null byte<strong>(‘\0’)</strong> is stored after the last character in the buffer. And it returns <strong>s</strong> on success, and NULL on error or when end of file occurs while no characters have been read.</li><li><code>int fputs(const char *s, FILE *stream);</code>: write the string <strong>s</strong> to <strong>stream</strong>, without its terminating null byte<strong>(‘\0’)</strong>. And it returns the character written as an <strong>unsigned char</strong> cast to an <strong>int</strong> or <strong>EOF</strong> on error.</li><li><code>int fscanf(FILE *stream, const char *format, ...);</code>: read input from the stream pointer <strong>stream</strong>. On success, it returns the number of input items successfully matched and assigned; this can be fewer  than  provided  for, or even zero, in the event of an early matching failure. The  value <strong>EOF</strong> is returned if the end of input is reached before either the first successful conversion or a matching failure occurs. <strong>EOF</strong> is also returned if a read error occurs, in which case the error indicator for the stream is set, and <strong>errno</strong> is set to indicate the error.</li><li><code>int fprintf(FILE *stream, const char *format, ...);</code>: output to a file descriptor <strong>fd</strong>, instead of to a <strong>stdio</strong> stream. Upon successful return, it returns the number of characters printed(excluding the null byte used to end output to strings) and If an output error is encountered, a negative value is returned.</li></ul></li><li><p>Input and output of binary file:</p><ul><li><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</code>: read <strong>nmemb</strong> items of data, each <strong>size</strong> bytes long, from the stream pointed to by <strong>stream</strong>,  storing  them  at  the location given by <strong>ptr</strong>. </li><li><code>size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);</code>: write <strong>nmemb</strong> items of data, each <strong>size</strong> bytes long, to the stream pointed to by <strong>stream</strong>, obtaining them  from the location given by <strong>ptr</strong>.</li><li>Return value: On sucess <code>fread()</code> and <code>fwrite</code> return the number of items read or written. This number equals the number of bytes transferred only when <strong>size</strong> is 1. If an error occurs, or the end of the file is reached, the return value is a short item count(or zero).</li></ul></li><li><p>Other functions in file operation:</p><ul><li></li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Count the number of words in the file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHITE_SPACE_OR (c==<span class="meta-string">' '</span>||c==<span class="meta-string">'\t'</span>||c==<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHITE_SPACE_AND (c!=<span class="meta-string">' '</span>&amp;&amp;c!=<span class="meta-string">'\t'</span>&amp;&amp;c!=<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage:%s file\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>, word = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    FILE *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open file error!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((c=fgetc(p))!=**EOF**)&#123;</span><br><span class="line">        <span class="keyword">if</span>(WHITE_SPACE_OR)&#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!flag&amp;&amp;WHITE_SPACE_AND)&#123;</span><br><span class="line">            word++;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"total of word:%d\n"</span>, word);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Merge two files and output to another file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C Language </tag>
            
            <tag> Advanced Knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Knowledge of C Language</title>
      <link href="/2018/11/07/BasicKnowledgeofC/"/>
      <url>/2018/11/07/BasicKnowledgeofC/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>dog $\sim$ Sin dog</p></blockquote><h2 id="Introduction-of-C-Language"><a href="#Introduction-of-C-Language" class="headerlink" title="Introduction of C Language"></a>Introduction of C Language</h2><h3 id="Program-algorithm-and-flow-chart"><a href="#Program-algorithm-and-flow-chart" class="headerlink" title="Program, algorithm and flow chart"></a>Program, algorithm and flow chart</h3><p>&emsp;A program, as a translator between computer language and human language, is an instruction collection written in a computer to perform certain operations or solve certain problems. An algorithm is an accurate and complete description of a solution to a problem. And flowchart is a graphical representation of an algorithm. In a word, a program is a collection of algorithm and data structure.</p><h3 id="Development-of-computer-language"><a href="#Development-of-computer-language" class="headerlink" title="Development of computer language"></a>Development of computer language</h3><ol><li>Machine language: consist of binary instructions for ‘0’ and ‘1’;</li><li>Assembly language: instructions described by mnemonic;</li><li>High-level language: contain object-oriented or process-oriented languages. And C language, which belongs to process-oriented languages, is suitable for system-level development, but not application level.</li></ol><a id="more"></a><h3 id="The-first-C-program"><a href="#The-first-C-program" class="headerlink" title="The first C program"></a>The first C program</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* Copyright (C) Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment">* File name: main.c</span></span><br><span class="line"><span class="comment">* Author: YouthFaith</span></span><br><span class="line"><span class="comment">* Version: 1.0.0</span></span><br><span class="line"><span class="comment">* Date: 2018/12/07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thereamong, the return state value is usually:</p><ul><li><code>0</code>: normal;</li><li><code>1</code>: function error;</li><li><code>2</code>: no such file;</li><li><code>3</code>: no such directory;</li><li><code>4</code>: access denied;</li><li><code>5</code>: permission denied.</li></ul><h3 id="Annotation-in-C-language-—-account-for-about-20-of-the-source-code"><a href="#Annotation-in-C-language-—-account-for-about-20-of-the-source-code" class="headerlink" title="Annotation in C language —- account for about 20% of the source code"></a>Annotation in C language —- account for about 20% of the source code</h3><ol><li><code>/* xxxxxx */</code>: multi-line comment;</li><li><code>//xxx</code>: single-line comment;</li><li>Usually used for:<ul><li>Announcement for version or copyright;</li><li>Function description;</li><li>Prompts of important lines or paragraphs.</li></ul></li></ol><h3 id="Development-process-of-C-program"><a href="#Development-process-of-C-program" class="headerlink" title="Development process of C program"></a>Development process of C program</h3><ol><li>Demand analysis;</li><li>The profile design;</li><li>The detailed design;</li><li>Software coding: <ul><li>Write program code: generate source file with “.c “as file extension;</li><li>Compile source file: generate target file with “.o” as file extension;</li><li>Link object file: generate executable files.</li></ul></li><li>Software testing;</li><li>Software delivery;</li><li>Software maintenance.</li></ol><h2 id="GCC-and-GDB"><a href="#GCC-and-GDB" class="headerlink" title="GCC and GDB"></a>GCC and GDB</h2><h3 id="Usage-of-GCC"><a href="#Usage-of-GCC" class="headerlink" title="Usage of GCC"></a>Usage of GCC</h3><ol><li>GNU project<ul><li><code>src</code>: contain source files;</li><li><code>bin</code>: contain executable files;</li><li><code>obj</code>: contain object files;</li><li><code>include</code>: contain header files.</li></ul></li><li>Basic grammar of GCC: <code>gcc [options] file...</code><ul><li><code>-E</code>: preprocess only, do not compile, assemble or link;</li><li><code>-S</code>: compile only, do not assemble or link;</li><li><code>-c</code>: compile and assemble, but do not link;</li><li><code>-o &lt;file&gt;</code>: place the output into file;</li><li><code>-std=&lt;standard&gt;</code>: assume that the input sources are for standard;</li><li><code>-I &lt;dir&gt;</code>: add <code>dir</code> to the search path list of header files;</li><li><code>-O/O2/O3</code>: Some optimizations are enable and the larger the number, the higher the level. And we can use <code>time executable file</code> to view execution time;</li><li><code>-ansi</code>: In C mode, this is equivalent to <code>-std=c90</code> and in C++ mode, it is equivalent to <code>-std=c++9</code>;</li><li><code>-Wall</code>: This enables all the warnings about constructions considered questionable.</li></ul></li><li>Compile process of GCC<ul><li>The first step: preprocessing phase <code>gcc -E file.c -o main.i</code><ul><li>Conditional compilation and header file expansion;</li><li>Macro substitution(#define) —- macro with parameters: <code>#define function(x) Expression of the variable x</code>;</li><li>Remove comments;</li></ul></li><li>The second step: compile phase <code>gcc -S file.i -o file.s</code><ul><li>Analyze the words, syntax and semantics of the files that need to be compiled, and optimize them to make sure they are correct. When all the above syntax is correct, an assembly file will be generated;</li></ul></li><li>The third step: assembly phase <code>gcc -c file.s -o file.o</code><ul><li>Assemble assembly language into machine language;</li></ul></li><li>The fourth step: link phase <code>gcc -o execuable file file.o</code><ul><li>Link dynamic and static libraries to generate executable files.</li></ul></li></ul></li></ol><h3 id="The-usage-of-GDB"><a href="#The-usage-of-GDB" class="headerlink" title="The usage of GDB"></a>The usage of GDB</h3><ol><li><p>GDB is used to debug some programs. It has mainly four purposes:</p><ul><li>Run the program as the user requests;</li><li>Stop the program at the break point;</li><li>Check the environment such as variables before breakpoints;</li><li>Modify the execution environment dynamically.</li></ul></li><li><p>The command format: <code>gcc - g [options] file...</code> $\Rightarrow$ <code>gdb executable file</code>.</p></li><li><p>The common commands in GDB</p><ul><li><code>l(list) [LineNumber/FunctionName]</code>: type the text of the program in the vicinity of where it is presently stopped</li><li><code>b(break) LineNumber/FunctionName</code>: set a breakpoint at function</li><li><code>disable BreakPointNumber</code>: make breakpoint disable at the present</li><li><code>delete BreakPointNumber</code>: delete breakpoint</li><li><code>info b</code>: view the breakpoint user sets</li><li><code>r(run)</code>: start program</li><li><code>p(print) expr</code>: display the value of an expression</li><li><code>n(next)</code>: execute next program line and step over any function calls in the line</li><li><code>s(step)</code>: execute next program line and step into any function calls in the line</li><li><code>c(continue)</code>: continue running program</li></ul></li><li><p>Senior commands in GDB</p><ul><li><code>set args ParametersList</code>: set runtime parameters</li><li><code>show args</code>: show runtime parameters</li><li><code>path dir</code>: set the path to run the program</li><li><code>show paths</code>: show executable and object file path</li><li><code>set Variable = Value</code>: modify variable value during runtime</li><li><code>set environment Variable [=Value]</code>: set environment variable of the computer</li><li><code>show environment [Variable]</code>: show environment variable of the computer</li><li><code>cd dir</code>: change current directory</li><li><code>pwd</code>: show working directory</li><li><code>shell Command</code>: run commands for shell</li><li><code>x /&lt;n/f/u&gt; &lt;addr&gt;</code>: show variable value in the memory. Thereamong, <strong>n</strong> represents the length of memory, <strong>f[d/o/x/c/s/i]</strong> represents the format of the display, <strong>u[b/h/w/g]</strong> represents the number of bytes to display from the current address, and <strong>addr</strong> represents the memory address of variable.</li><li><code>disassemble FunctionName</code>: view the assembly code</li><li><code>display /i $pc</code>: show source code and assembly code. <strong>$pc</strong> represents the value of the program counter and <strong>/i</strong> represents displaying in instruction address format.</li></ul></li><li><p>When an abnormal crash occurs while the program is running, the current memory condition of the running program is stored in a core file by core dump. And segmentation fault is the major cause of this. So the file can be used to find where error is.</p><ul><li><code>ulimit -c [size]</code>: set the size of core file(the uunit is kbyte)</li><li><code>gcc -g -o ExecutableFile SourceFile</code>: compile program with <strong>-g</strong></li><li>Run it: Core dump will generate core file if any problem.</li><li><code>gdb ExecutableFile CoreFile</code>: locate where fault is</li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Learn the disassemble function in GDB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The sum = %d\n"</span>,i+j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The result of disassembling:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(gdb) disassemble main </span></span><br><span class="line"><span class="comment">Dump of assembler code for function main:</span></span><br><span class="line"><span class="comment">   0x0000000000001135 &lt;+0&gt;:push   %rbp</span></span><br><span class="line"><span class="comment">   0x0000000000001136 &lt;+1&gt;:mov    %rsp,%rbp</span></span><br><span class="line"><span class="comment">   0x0000000000001139 &lt;+4&gt;:sub    $0x20,%rsp</span></span><br><span class="line"><span class="comment">   0x000000000000113d &lt;+8&gt;:mov    %edi,-0x14(%rbp)</span></span><br><span class="line"><span class="comment">   0x0000000000001140 &lt;+11&gt;:mov    %rsi,-0x20(%rbp)</span></span><br><span class="line"><span class="comment">   0x0000000000001144 &lt;+15&gt;:movl   $0x1,-0x8(%rbp)</span></span><br><span class="line"><span class="comment">   0x000000000000114b &lt;+22&gt;:movl   $0x2,-0x4(%rbp)</span></span><br><span class="line"><span class="comment">   0x0000000000001152 &lt;+29&gt;:mov    -0x8(%rbp),%edx</span></span><br><span class="line"><span class="comment">   0x0000000000001155 &lt;+32&gt;:mov    -0x4(%rbp),%eax</span></span><br><span class="line"><span class="comment">   0x0000000000001158 &lt;+35&gt;:add    %edx,%eax</span></span><br><span class="line"><span class="comment">   0x000000000000115a &lt;+37&gt;:mov    %eax,%esi</span></span><br><span class="line"><span class="comment">   0x000000000000115c &lt;+39&gt;:lea    0xea1(%rip),%rdi        # 0x2004</span></span><br><span class="line"><span class="comment">   0x0000000000001163 &lt;+46&gt;:mov    $0x0,%eax</span></span><br><span class="line"><span class="comment">   0x0000000000001168 &lt;+51&gt;:callq  0x1030 &lt;printf@plt&gt;</span></span><br><span class="line"><span class="comment">   0x000000000000116d &lt;+56&gt;:mov    $0x0,%eax</span></span><br><span class="line"><span class="comment">   0x0000000000001172 &lt;+61&gt;:leaveq </span></span><br><span class="line"><span class="comment">   0x0000000000001173 &lt;+62&gt;:retq   </span></span><br><span class="line"><span class="comment">End of assembler dump.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Primary-data-type"><a href="#Primary-data-type" class="headerlink" title="Primary data type"></a>Primary data type</h2><h3 id="Constants-and-variables"><a href="#Constants-and-variables" class="headerlink" title="Constants and variables"></a>Constants and variables</h3><ol><li>Constant:  A variable whose value can not be changed during the execution and can be used directly without declaration:<ul><li>Contains direct constant(integer constant, float constant, character constant and string constant) and symbolic constant(use <code>#define</code> keyword to declare);</li><li>The function of symbolic constant:<ul><li>Accurate Meaning;</li><li>One changes, all change;</li></ul></li><li>Specially, macro with parameters is just statement substitution in the preprocessing phase.</li></ul></li><li>Variable: A variable, whose value can be changed during the execution, represents a storage cell. One variable has one name and occupies certain storage unit in the memory:<ul><li>Must be used after being declared;</li><li>Declaration is classified into definitional declaration and referential declaration(<code>extern</code>).</li></ul></li><li>The naming rule of identifier: consist of letters, numbers and underline. Specially it must start with letters or underline, and be case sensitive.</li><li>The declaration, initialization and definition of a variable:<ul><li>Declaration: declare type and name to the compiler without allocating storage space(referential declaration). Format: <code>DataType Variable;</code>;</li><li>Definition and initialization: declare type and name with allocating storage space. Format: <code>DataType Variable = Value;</code>.</li></ul></li></ol><h3 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h3><ol><li>The Primary data type is classified into: basic data type(<code>int</code>, <code>float</code>, <code>char</code> and <code>enum</code>), structure data type(<code>array</code>, <code>struct</code>, <code>union</code>), pointer data type(<code>*</code>) and nullable data type(<code>void</code>);</li><li>We can use <code>sizeof(variable)</code> to view the bytes the variable occupies in memory;</li><li><p>Integer(short, int, long): When the assignment is out of range, the assignment is restarted, such as 65536 in short is 0;</p><ul><li><p>Integers are stored in memory in the form of complemental code, such as the storage form of <code>int i = 10;</code> in memory is <code>0000 0000 0000 0000 0000 0000 0000 1010</code>(4B in total), and the storage form of <code>int i = -10;</code> in memory is <code>1111 1111 1111 1111 1111 1111 1111 0110</code>(4B in total);</p></li><li><p><code>%d</code>(decimal), <code>%o</code>(octal), <code>%x</code>(hexadecimal), <code>%e</code>(scientific notation), <code>%f</code>(float);</p></li><li><p>int(4B), unsigned(4B), short(2B), unsigned short(2B), long(4B), unsigned long(4B) —- based on a 32-bit computer as shown in <code>/usr/include/limits.h</code> header file.</p></li></ul></li><li>Character(char): The character type is enclosed in single quotation marks, corresponding to the ASCII(1B in total);<ul><li>Where the escape character begins with <code>\</code>, making it different from the original meaning;</li><li>String variable: enclosed in double quotation marks, and is able to contain one or more characters. We use a character array to store a string variable with <code>\0</code> ending tag;</li><li>String array: <code>char Variable[] = &quot;String&quot;;</code>.</li></ul></li><li>Float and double type: <ul><li>Float constant:  decimal form and exponential form;</li><li>The way to store: IEEE 754. It is divided into: <code>S</code>(sign), <code>E</code>(exponent-marker), <code>M</code>(mantissa), and exponent-marker is represented by frame shift with 127 offset. </li><li>Float is 32-bit and double is 64-bit.</li></ul></li><li>Enum type:<ul><li>The declaration format: <code>enum EnumTypeName{Value1, Value2, ..., Valuen};</code>;</li><li>The definition format:<ul><li><code>enum EnumTypeName EnumVariable;</code>;</li><li><code>enum EnumTypeName{Value1, Value2, ..., Valuen} EnumVariableList;</code>;</li><li><code>enum {Value1, Value2, ..., Valuen} EnumVariableList;</code>;</li></ul></li><li>Specially, enum type belongs to integer type, and its value is defined as 0, 1, 2, …, n.</li></ul></li></ol><h3 id="Formatted-input-output-functions"><a href="#Formatted-input-output-functions" class="headerlink" title="Formatted input/output functions"></a>Formatted input/output functions</h3><ol><li>The object to input and output is the computer;</li><li>Standard input and output library functions is contained in the header file <code>&lt;stdio.h&gt;</code>;</li><li>Syntactic structure:<ul><li>Formatted output: <code>*</code> is used to define format<ul><li><code>printf(&quot;string of format control&quot;, output list);</code> $\Rightarrow$ <code>printf(&quot;%[mark][output minimun width][.accuracy][long tag]type&quot;, variable);</code>;<ul><li>Mark: <code>-</code>(align left, whitespace right), <code>+</code>(output signs), <code>blank space</code>(positive numbers with spaces, negative numbers with minus signs), <code>#</code>(formalize octal and hexadecimal numbers);</li><li>Long tag: <code>h</code> represents short integers and <code>l</code> represents long integers;</li><li>Type: <code>d</code>(decimal), <code>o</code>(octal), <code>x</code>(hexadecimal), <code>f</code>(float and double), <code>e</code>(scientific notation), <code>c</code>(char), <code>s</code>(string), <code>p</code>(address or pointer variable), <code>g</code>(only show significant digit);</li></ul></li></ul></li><li>Formatted input: <code>*</code> is used to delay<ul><li><code>scanf(&quot;string of format control&quot;, address list);</code> $\Rightarrow$ <code>scanf(&quot;%[mark][input minimun width][long tag]type&quot;, address list);</code>;</li><li><code>char *fgets(char *s, int size, FILE *stream);</code>: <strong>fgets()</strong> reads in at most one less than size characters from stream and stores them into the buffer pointed to by <strong>s</strong>. Reading stops after an EOF or a newline. If a newline is read, it is stored into the buffer. A terminating null byte<strong>(‘\0’)</strong> is stored after the  last  character in the buffer.</li><li><code>char *gets(char *s);</code>: <strong>gets()</strong>  reads a line from <strong>stdin</strong> into the buffer pointed to by s until either a terminating newline or EOF, which it replaces with a null byte<strong>(‘\0’)</strong>.</li><li><code>int getchar(void);</code>: <code>gerchar()</code> reads  the next character from the stdin. It is usually used to solve the problem produced by continuous input of two characters;</li><li><code>int putchar(int c);</code>:  <code>putchar()</code> writes a character to the stdout;</li><li>Clear the cache: <code>while(getchar()!=&#39;\n&#39;);</code> or use a blank space to skip white-space character and force to refresh a printf cache: <code>fflush(stdout);</code>;</li><li>Specially, When we use <code>math.h</code> header file, we must compile source file with <code>-lm</code> parameter to link library files.</li></ul></li></ul></li><li>Common functions about standard input and output:<ul><li><code>int sscanf(const char *str, const char *format, ...);</code>: read its input from the character string pointed to by <strong>str</strong>. On success, it returns the number of input items successfully matched and assigned; this can be fewer  than  provided  for, or even zero, in the event of an early matching failure. The  value <strong>EOF</strong> is returned if the end of input is reached before either the first successful conversion or a matching failure occurs. <strong>EOF</strong> is also returned if a read error occurs, in which case the error indicator for the stream is set, and <strong>errno</strong> is set to indicate the error.</li><li><code>int sprintf(char *str, const char *format, ...);</code>: write at most <strong>size</strong> bytes(including the terminating null byte<strong>(‘\0’)</strong>) to <strong>str</strong>. Upon successful return, it returns the number of characters printed(excluding the null byte used to end output to strings) and If an output error is encountered, a negative value is returned.</li></ul></li></ol><h3 id="Read-only-variable-and-constant"><a href="#Read-only-variable-and-constant" class="headerlink" title="Read-only variable and constant"></a>Read-only variable and constant</h3><ol><li>Read-only variable: a unchanged variable and its format: <code>const DataType Variable = Value</code>;</li><li>Read-only variable is a variable and it needs storage space, while constant not.</li></ol><h3 id="Case-study"><a href="#Case-study" class="headerlink" title="Case study"></a>Case study</h3><ol><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calculate the area of a circle</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pai 3.14</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number for the radius of a circle:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The area of circle is：%g.\n"</span>, Pai * i * i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The usage of '*' in printf and scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width,precision;</span><br><span class="line">    <span class="keyword">float</span> salary = <span class="number">123.123f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input width and precision of 123.123:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;width,&amp;precision);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"salary:%*.*f.\n"</span>,width,precision,salary);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input three numbers continuously:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%*d %*d %d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The number you inputed is:%d.\n"</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Conditional-structure"><a href="#Conditional-structure" class="headerlink" title="Conditional structure"></a>Conditional structure</h2><h3 id="Syntactic-structure"><a href="#Syntactic-structure" class="headerlink" title="Syntactic structure"></a>Syntactic structure</h3><ol><li><p><code>if</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( expression ) statement;</span><br><span class="line"><span class="keyword">if</span>( expression ) statement; <span class="keyword">else</span> statement;</span><br><span class="line"><span class="keyword">if</span>( expression1 ) statement1; <span class="keyword">else</span> <span class="keyword">if</span>( expression2 ) statement2; ... <span class="keyword">else</span> statementn;</span><br><span class="line"><span class="keyword">and</span> nesting of <span class="keyword">if</span> statement;</span><br></pre></td></tr></table></figure><ul><li>Specially, <code>ctype.h</code> header file contains some useful functions like <code>isalpha</code>, <code>isdigit</code>, <code>ispunct</code>, <code>islower</code>, <code>isupper</code>, <code>isspace</code>, <code>toupper</code> and <code>tolower</code>;</li></ul></li><li><p><code>switch</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>( expression --- the result must be integer )</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">case</span> constant expression1: </span><br><span class="line">        statement1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant expression2:</span><br><span class="line">        statement2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statementn;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Conditional operator:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1?expression2:expression3</span><br></pre></td></tr></table></figure></li></ol><h3 id="Case-study-1"><a href="#Case-study-1" class="headerlink" title="Case study"></a>Case study</h3><ol><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Realize banking function</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> balance = <span class="number">0.0f</span>, deposit, withdraw;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*** ACME checkbook-balancing program ***\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Commands: 0=clear, 1=deposit, 2=withdraw, 3=balance, 4=exit\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter command:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cmd);</span><br><span class="line">        <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                balance = <span class="number">0.0f</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Enter amount of deposit: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;deposit);</span><br><span class="line">                balance += deposit;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Enter amount of withdraw: "</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;withdraw);</span><br><span class="line">                balance -= withdraw;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Current balance: $%.2f\n"</span>, balance);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Commands: 0=clear, 1=deposit, 2=withdraw, 3=balance, 4=exit\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Cycle-control"><a href="#Cycle-control" class="headerlink" title="Cycle control"></a>Cycle control</h2><h3 id="The-introduction-of-cycle-control"><a href="#The-introduction-of-cycle-control" class="headerlink" title="The introduction of cycle control"></a>The introduction of cycle control</h3><ol><li>The advantages of cycle:<ul><li>The structure is clear and is easy to read;</li><li>Reduce code size;</li><li>Improve code reuse;</li></ul></li><li>The service environment: to solve problems that require multiple repetitions of one or more tasks.</li></ol><h3 id="Syntactic-structure-1"><a href="#Syntactic-structure-1" class="headerlink" title="Syntactic structure"></a>Syntactic structure</h3><ol><li><p><code>while</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( expression )&#123; loop body&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>do-while</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123; loop body &#125;<span class="keyword">while</span>( expression );</span><br></pre></td></tr></table></figure></li><li><p><code>for</code> statement:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( expression1 --- init cyclic variable; expression2 --- the loop condition; expression3 --- change cyclic variable )&#123; loop body &#125;</span><br></pre></td></tr></table></figure><ul><li>Specially, <code>;</code> can not be default while expression1, expression2 and expression3 can be default.</li></ul></li><li><p>Jump statement:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functions: it is the transfer control of the program and changes the execution process of the program;</span><br><span class="line">go to(unconditional jump, use with caution)</span><br><span class="line">break(jump out of the loop);continue(skip the remaining statements in the body of the loop and get into the next loop)</span><br></pre></td></tr></table></figure></li></ol><h3 id="Nested-loop"><a href="#Nested-loop" class="headerlink" title="Nested loop"></a>Nested loop</h3><ol><li><p>Principle: from inside to outside;</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Print pyramid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> line, i, j, k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input a number for the line:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;line; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=line-i; j&gt;<span class="number">1</span>; j--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;<span class="number">2</span>*i+<span class="number">1</span>; k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Print the multiplication table</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d*%d=%02d "</span>, i, j, i*j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example three</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Print primes between 100 and 200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Primes between 100 and 200 are:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>; i&lt;<span class="number">201</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j&lt;=<span class="built_in">sqrt</span>(i+<span class="number">1</span>); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Operator-and-expression"><a href="#Operator-and-expression" class="headerlink" title="Operator and expression"></a>Operator and expression</h2><h3 id="The-introduction-of-operator"><a href="#The-introduction-of-operator" class="headerlink" title="The introduction of operator:"></a>The introduction of operator:</h3><ol><li><p>Classification of operators:</p><ul><li>Unary operator: <code>&amp;</code>, <code>*</code>, <code>~</code>, <code>sizeof</code>, <code>()</code>;</li><li>Binary operator: <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>^</code>;</li><li>Ternary operator: <code>expression1?expression2:expression3</code>;</li></ul></li><li><p>Arithmetic operator: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>;</p></li><li><p>Relational operator: <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>;</p></li><li><p>Logical operator: <code>!</code>, <code>&amp;&amp;</code>, <code>||</code>, Short circuit rule:  for <code>&amp;&amp;</code>, if the left operand is 0, the result must be 0, right</p><p>operands will not be calculated; For <code>||</code>, if the left operand is not 0, then the result must be 1, and the right operand will not be calculated;</p></li><li><p>Comma operator: <code>expression1, expression2</code>;</p></li><li><p>Bit operator: <code>&amp;</code>, <code>|</code>, <code>~</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>;</p></li><li><p>Assigning operator: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, a lvalue must be a storage cell and a rvalue must be a certain value.</p></li></ol><h3 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h3><ol><li><p>The classification of type conversion:</p><ul><li>Implicit conversion:<ul><li>Usage scenarios:<ul><li>The types of operand in an arithmetic or logical expression are different;</li><li>The type of the expression on the right side of the assignment operator does not match the type of the variable on the left;</li><li>An actual parameter type in a function call does not match its formal parameter type;</li><li>The type of the expression in the return statement does not match the type of the return value of the function.</li></ul></li><li>The improvement of data type:<ul><li>char、short $\rightarrow$ int $\rightarrow$ unsigned int $\rightarrow$ long int $\rightarrow$ unsigned long int;</li><li>float $\rightarrow$ double $\rightarrow$ long double;</li><li>integer $\rightarrow$ float;</li><li>signed $\rightarrow$ unsigned;</li></ul></li></ul></li><li>Explicit conversion: <code>(TypeSpecifier)(expression)</code>;</li></ul></li><li><p>True code, complemental code and ones-complement code:</p><ul><li>For the positive number: True code = complemental code = ones-complement code;</li><li>For the negative number: True code: the same as positive number’s. complemental code: reverse true code and plus one. ones-complement code: the sign bit stays the same, the number bit is reversed.</li></ul></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swap the values of two integer variables</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d b:%d -before\n"</span>,a,b);</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d b:%d -after\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="The-basic-knowledge-of-function"><a href="#The-basic-knowledge-of-function" class="headerlink" title="The basic knowledge of function"></a>The basic knowledge of function</h2><h3 id="The-advantage-and-classification-of-function"><a href="#The-advantage-and-classification-of-function" class="headerlink" title="The advantage and classification of function"></a>The advantage and classification of function</h3><ol><li>Advantages:<ul><li>Make the program shorter and clearer;</li><li>Good for program maintenance;</li><li>Can improve the efficiency of code development;</li><li>Improve code reuse.</li></ul></li><li>Classifications:<ul><li>Library function: provided by system, no need to be defined, must include header files;</li><li>User-defined function: need to be defined, and must be declared before in use;</li><li>Specially, the difference between inline function and macro with parameters is: When the function is called, control transfer will occur, and the code will be transferred to the function definition section and start running down. However, when the inline function is running to the function call, control transfer will not occur, but the function definition section will be directly copied down and run directly, which is defined as <code>inline DataType FunctionName();</code>.</li></ul></li></ol><h3 id="The-definition-and-calling-of-function"><a href="#The-definition-and-calling-of-function" class="headerlink" title="The definition and calling of function"></a>The definition and calling of function</h3><ol><li>Syntactic format for definition:<ul><li>Function without parameters: <code>DataType FunctionName(){ statement };</code>;</li><li>Function with parameters: <code>DataType FunctionName( FormalParameterList ){ statement };</code>;</li><li>Specially, the type specifier indicates the return type of the function, and the content in <code>{}</code> is called the function body. If the function does not have return value, the return type is <code>void</code>, and it is not necessary to use the return statement; if it does, the return statement is required to return a value matching the return type.</li></ul></li><li>Syntactic format for calling: <code>FunctionName( ActualParameterList)</code>;</li><li>Actual parameter and formal parameter must be consistent in quantity, type and sequence. Specially, actual parameter must be determined value and the transfer is one-way( the formal $\Rightarrow$ the actual ).</li><li>A nested call to a function: The calls to another function to occur within the definition of one function is allowed. No nested definitions of functions exist.</li></ol><h3 id="Concept-and-declaration-of-function-prototype"><a href="#Concept-and-declaration-of-function-prototype" class="headerlink" title="Concept and declaration of function prototype"></a>Concept and declaration of function prototype</h3><ol><li><p>Principle: first declare, then call and definitions cannot be repeated while declarations can;</p></li><li><p>Declaration of function prototype:  the compilation system is notified of name and return type of the function, and number, type and sequence of the parameters, so that the statements containing the function calls can be checked against when compiled;</p></li><li><p>Format: <code>DataType FunctionName(DataType FormalParameter, ...);</code> or</p><p> <code>DataType FunctionName(DataType, ...);</code>;</p></li><li><p>Usually a function can be declared in header files and defined in source files;</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test the compilation of the header file</span></span><br><span class="line"><span class="comment">//include/test.h</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//src/test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//src/main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input a number:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">    <span class="keyword">if</span>(!test(i))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"success!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"failure\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Example two</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Implement a simple calculator</span></span><br><span class="line"><span class="comment">//src/calculator.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mymath.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_option</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_result</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> result, <span class="keyword">int</span> option)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> done = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> option, num1, num2, result;</span><br><span class="line">    <span class="keyword">while</span>(!done)&#123;</span><br><span class="line">    option = get_option();</span><br><span class="line">    <span class="keyword">if</span>(option == <span class="number">5</span>)&#123;</span><br><span class="line">   done = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nPlease inpurt two numbers: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;num1, &amp;num2);</span><br><span class="line">    <span class="keyword">if</span>(option == <span class="number">4</span> &amp;&amp; num2 == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n**** Error ****"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nSecond number can bot be 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(option == <span class="number">4</span> &amp;&amp; num2 == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">switch</span>(option)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    result = add(num1, num2);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    result = sub(num1, num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    result = mul(num1, num2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    result = div(num1, num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print_result(num1, num2, result, option);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_option</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> option;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n**********************"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** MENU ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** 1.ADD ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** 2.SUB ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** 3.MUL ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** 4.DIV ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** 5.QUIT ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n****** ******"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n**********************"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nPlease input your choice: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;option);</span><br><span class="line">        <span class="keyword">if</span>(option &lt; <span class="number">1</span> || option &gt; <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"Invalid option. Please re-enter.\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(option &lt; <span class="number">1</span> || option &gt; <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> option;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_result</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> result, <span class="keyword">int</span> option)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">operator</span>;</span><br><span class="line">    <span class="keyword">switch</span>(option)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">operator</span> = <span class="string">'+'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">operator</span> = <span class="string">'-'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">operator</span> = <span class="string">'*'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">operator</span> = <span class="string">'/'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n***%d %c %d = %d***\n"</span>,num1, <span class="keyword">operator</span>, num2, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//src/mymath.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i * j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i / j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//include/mymath.h</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="One-dimensional-array"><a href="#One-dimensional-array" class="headerlink" title="One-dimensional array"></a>One-dimensional array</h3><ol><li><p>Concept:  organize several variables orderly whose type is the same. In computer memory, all elements of an array are stored in adjacent storage locations in the order of subscript. Array name is the unique identifier of an array, and array elements are represented by array name and subscript;</p></li><li><p>Definition of linear array: <code>DataType ArrayName[ConstantExpression];</code>;</p></li><li><p>Initialization of linear array:</p><ul><li><p><code>DataType ArrayName[ConstantExpression] = {Value1, Value2, ..., Valuen}</code>: </p><p>When <code>ConstantExpression</code> is omitted in initialization, the system allocate the size of the array according to the numbers of values.</p></li><li><p><code>ArrayName[n] = An arithmetic expression for n</code>;</p></li><li><p><code>for(...){scanf(&quot;string of format control&quot;, &amp;ArrayName[n]);}</code>;</p></li><li><p>When the array is partly initialized, the unassigned element is initialized to 0 by default;</p></li><li><p>If you assign values to all elements, the length of the array may not be specified in the array definition.</p></li></ul></li><li><p>Usage to linear array: <code>ArrayName[Subscript]</code>.</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Enter a group of ages and count the age groups</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> persons[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input ages: "</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;persons[i]);</span><br><span class="line">    <span class="keyword">int</span> ages[<span class="number">11</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = persons[i] / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= <span class="number">10</span>)</span><br><span class="line">        ages[<span class="number">10</span>]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">    ages[k]++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; <span class="number">11</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ages[%d]:%d\n"</span>,i,ages[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Two-dimensional-array"><a href="#Two-dimensional-array" class="headerlink" title="Two-dimensional array"></a>Two-dimensional array</h3><ol><li><p>Definition of two-dimensional array: </p><p><code>DataType ArrayName[ConstantExpression1][ConstantExpression2];</code>, thereamong the former represents  row and the latter represents column. In C language, two-dimensional arrays are stored in rows with contiguous addresses.</p></li><li><p>Initialization of two-dimensional array: Row initializations can be omitted, but columns should never be omitted. Partial initializations are initialized to 0 by default;</p></li><li><p>Usage of two-dimensional array: <code>ArrayName[RowSubscript][ColumnSubscript]</code>.</p></li><li><p>Example one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Print Yang Hui triangle</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">20</span>;j++)</span><br><span class="line">    a[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input row: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;row);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; row;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(k = row;k &gt; i;k--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt;= i;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="number">0</span>||i == j)</span><br><span class="line">    a[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    a[i][j] = a[i<span class="number">-1</span>][j] + a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%2d"</span>,a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h2><h3 id="Generating-random-number"><a href="#Generating-random-number" class="headerlink" title="Generating random number"></a>Generating random number</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> a = rand()%<span class="number">90</span>+<span class="number">10</span>; <span class="comment">//represent 10~99</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Do-not-display-password"><a href="#Do-not-display-password" class="headerlink" title="Do not display password"></a>Do not display password</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *password;</span><br><span class="line">    password = getpass(<span class="string">"Input password:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The password is: %s\n"</span>,password);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* another way */</span></span><br><span class="line">system(<span class="string">"stty -echo"</span>);</span><br><span class="line">system(<span class="string">"stty echo"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic Knowledge </tag>
            
            <tag> C Language </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
