<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Basic Knowledge of C Language</title>
      <link href="/2018/10/07/BasicKnowledgeofC/"/>
      <url>/2018/10/07/BasicKnowledgeofC/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>dog $\sim$ Sin dog</p></blockquote><h2 id="Introduction-of-C-Language"><a href="#Introduction-of-C-Language" class="headerlink" title="Introduction of C Language"></a>Introduction of C Language</h2><h3 id="Program-Algorithm-Data-Structure"><a href="#Program-Algorithm-Data-Structure" class="headerlink" title="Program = Algorithm + Data Structure"></a>Program = Algorithm + Data Structure</h3><ol><li>Concept of the program: as a translator between computer language and human language, it is a collection of instructions that performs a specific task when executed by a computer. Usually, A computer program is usually written by a computer programmer in a programming language. From the program in its human-readable form of source code, a compiler or assembler can derive machine code — a form consisting of instructions that the computer can directly execute. Alternatively, a computer program may be executed with the aid of an interpreter. A collection of computer programs, libraries, and related data are referred to as software. Computer programs may be categorized along functional lines, such as application software and system software. <a id="more"></a></li><li>Concept of the algorithm: the underlying method used for some calculation or manipulation is known as an algorithm. To be specific, it is an accurate and complete description of a solution to a problem. As an effective method, an algorithm can be expressed within a finite amount of space and time and in a well-defined formal language for calculating a function. Starting from an initial state and initial input (perhaps empty), the instructions describe a computation that, when executed, proceeds through a finite number of well-defined successive states, eventually producing “output” and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.</li><li>Concept of the data structure: in computer science, it is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.</li></ol><h3 id="Development-of-Computer-Language"><a href="#Development-of-Computer-Language" class="headerlink" title="Development of Computer Language"></a>Development of Computer Language</h3><ol><li>Machine language: consist of binary instructions for ‘0’ and ‘1’. It can be executed directly by a computer’s central processing unit (CPU). Each instruction causes the CPU to perform a very specific task, such as a load, a store, a jump, or an ALU operation on one or more units of data in CPU registers or memory.</li><li>Assembly language: instructions described by mnemonic and it is any low-level programming language in which there is a very strong correspondence between the instructions in the language and the architecture’s machine code instructions.</li><li>High-level language: contain object-oriented or process-oriented languages. And C language, which belongs to process-oriented languages, is suitable for system-level development, but not application level.</li></ol><h3 id="The-First-C-Program"><a href="#The-First-C-Program" class="headerlink" title="The First C Program"></a>The First C Program</h3><ul><li><p>A “Hello, World!” program generally is a computer program that outputs or displays the message “Hello, World!”. Such a program is very simple in most programming languages, and is often used to illustrate the basic syntax of a programming language. It is often the first program written by people learning to code</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment"> * File name: main.c</span></span><br><span class="line"><span class="comment"> * Author: YouthFaith</span></span><br><span class="line"><span class="comment"> * Version: 1.0.0</span></span><br><span class="line"><span class="comment"> * Date: 2018/10/07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Comment-in-C-Language"><a href="#Comment-in-C-Language" class="headerlink" title="Comment in C Language"></a>Comment in C Language</h3><ol><li><code>/* xxxxxx */</code>: multi-line comment.</li><li><code>//xxx</code>: single-line comment.</li><li>Usually used for<ul><li>Announcement for version or copyright.</li><li>Function description.</li><li>Prompts of important lines or paragraphs.</li></ul></li></ol><h3 id="Development-Process-of-C-Program"><a href="#Development-Process-of-C-Program" class="headerlink" title="Development Process of C Program"></a>Development Process of C Program</h3><ol><li>Requirements analysis: focus on the tasks that determine the needs or conditions to meet the new or altered product or project, taking account of the possibly conflicting requirements of the various stakeholders, analyzing, documenting, validating and managing software or system requirements.</li><li>Software design: the process by which an agent creates a specification of a software artifact, intended to accomplish goals, using a set of primitive components and subject to constraints. Software design may refer to either “all the activity involved in conceptualizing, framing, implementing, commissioning, and ultimately modifying complex systems” or “the activity following requirements specification and before programming, as … [in] a stylized software engineering process.”</li><li>Implement<ul><li>Write program code: generate source file with “.c “as file extension.</li><li>Compile source file: generate target file with “.o” as file extension.</li><li>Link object file: generate executable files.</li></ul></li><li>Testing: an investigation conducted to provide stakeholders with information about the quality of the software product or service under test. Software testing can also provide an objective, independent view of the software to allow the business to appreciate and understand the risks of software implementation. Test techniques include the process of executing a program or application with the intent of finding software bugs (errors or other defects), and verifying that the software product is fit for use.</li><li>Deployment: all of the activities that make a software system available for use.</li><li>Maintenance: the modification of a software product after delivery to correct faults, to improve performance or other attributes.</li></ol><h2 id="Primary-Data-Type"><a href="#Primary-Data-Type" class="headerlink" title="Primary Data Type"></a>Primary Data Type</h2><h3 id="Constants-and-Variables"><a href="#Constants-and-Variables" class="headerlink" title="Constants and Variables"></a>Constants and Variables</h3><ol><li>Constant: A variable whose value can not be changed during the execution and can be used directly without declaration.<ul><li>Contains direct constant (integer constant, float constant, character constant and string constant) and symbolic constant (use <strong>#define</strong> keyword to declare).</li><li>The function of symbolic constant<ul><li>Accurate Meaning.</li><li>One changes, all change.</li></ul></li><li>Specially, macro with parameters is just statement substitution in the preprocessing phase.</li></ul></li><li>Variable: A variable, whose value can be changed during the execution, represents a storage cell. One variable has one name and occupies certain storage unit in the memory.<ul><li>Must be used after being declared.</li><li>Declaration is classified into definitional declaration and referential declaration(use <strong>extern</strong> keyword to declare).</li></ul></li><li>The naming rule of identifier: consist of letters, numbers and underline. Specially it must start with letters or underline, and be case sensitive.</li><li>The declaration, initialization and definition of a variable<ul><li>Declaration: declare type and name to the compiler without allocating storage space (referential declaration). Format: <code>DataType VariableName;</code>.</li><li>Definition and initialization: declare type and name with allocating storage space. Format: <code>DataType VariableName = Value;</code>.</li></ul></li></ol><h3 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h3><ol><li>The primary data type is classified into: basic data type (<strong>int</strong>, <strong>float</strong>, <strong>char</strong> and <strong>enum</strong>), structure data type (<strong>array</strong>, <strong>struct</strong>, <strong>union</strong>), pointer data type (<strong>*</strong>) and generic data type (<strong>void</strong>).</li><li>We can use <strong>sizeof</strong> keyword to view the bytes the variable occupies in memory.</li><li><p>Integer (<strong>short</strong>, <strong>int</strong>, <strong>long</strong>): When the assignment is out of range, the assignment is restarted, such as 65536 in short is 0.</p><ul><li><p>Integers are stored in memory in the form of complemental code, such as the storage form of <code>int i = 10;</code> in memory is <code>[ 0000 0000 0000 0000 0000 0000 0000 1010 ]</code>(4B in total), and the storage form of <code>int i = -10;</code> in memory is <code>[ 1111 1111 1111 1111 1111 1111 1111 0110 ]</code>(4B in total).</p></li><li><p><strong>%d</strong> (decimal), <strong>%o</strong> (octal), <strong>%x</strong> (hexadecimal), <strong>%e</strong> (scientific notation), <strong>%f</strong> (float).</p></li><li><p>short (2B), unsigned short (2B), int (4B), unsigned (4B), long (8B), unsigned long (8B) —- based on a 64-bit computer as shown in <strong>limits.h</strong> header file.</p></li></ul></li><li>Character (char): The character type is enclosed in single quotation marks, corresponding to the ASCII (1B in total);<ul><li>In computing, an escape character is a character which invokes an alternative interpretation on subsequent characters in a character sequence. An escape character is a particular case of meta-characters. Generally, the judgment of whether something is an escape character or not depends on context. In many programming languages, an escape character also forms some escape sequences which are referred to control characters. For example, line break has an escape sequence of <strong>\n</strong>.</li><li>String variable: enclosed in double quotation marks, and is able to contain one or more characters. We use a character array to store a string variable with <strong>\0</strong> ending tag.</li><li>String array: <code>char StringName[] = &quot;String\0&quot;;</code>.</li></ul></li><li>Float and double type<ul><li>Float constant: decimal form and exponential form.</li><li>The way to store: IEEE 754. It is divided into: <strong>S</strong> (sign), <strong>E</strong> (exponent-marker), <strong>M</strong> (mantissa), and exponent-marker is represented by frame shift with 127 offset. </li><li>Float is 32-bit and double is 64-bit.</li></ul></li><li>Enumerated type<ul><li>The declaration format: <code>enum EnumName{Value1, Value2, ..., Valuen};</code>.</li><li>The definition format<ul><li><code>enum EnumName VariableName;</code>.</li><li><code>enum EnumName{Value1, Value2, ..., Valuen} VariableName;</code>.</li><li><code>enum {Value1, Value2, ..., Valuen} VariableName;</code>.</li></ul></li><li>Specially, enumerated type belongs to integer type, and its value is defined as 0, 1, 2, …, n.</li></ul></li></ol><h3 id="Formatted-Input-Output-Function"><a href="#Formatted-Input-Output-Function" class="headerlink" title="Formatted Input/Output Function"></a>Formatted Input/Output Function</h3><ol><li>Buffer mechanism<ul><li>The three types of buffering available are unbuffered, block buffered, and line buffered. When an output stream is unbuffered, information appears on the destination file or terminal as soon as written. When it is block buffered many characters are saved up and written as a block. When it is line buffered characters are saved up until a newline is output or input is read from any stream attached to a terminal device (typically <strong>stdin</strong>). The function <strong>fflush</strong> may be used to force the block out early or wait until the program ends. Of course, when the buffer is full, the output is automatically made.</li><li>Normally all files are block buffered and we can use <strong>fclose</strong> to force the block out. If a stream refers to a terminal (as <strong>stdout</strong> normally does), it is line buffered. And when it encounters <strong>\n</strong>, it will automatically output. The standard error stream <strong>stderr</strong> is always unbuffered by default. </li></ul></li><li><p>Standard input/output function</p><ul><li><p>Formatted output (<strong>*</strong> is used to define format) and formatted input (<strong>*</strong> is used to delay)</p><ul><li><p><code>int printf(const char *format, ...);</code> $\Rightarrow$ <code>printf(&quot;%[mark][output minimun width][.accuracy][long tag]type&quot;, VariableName);</code>.</p></li><li><p><code>int scanf(const char *format, ...);</code> $\Rightarrow$ <code>scanf(&quot;%[mark][input minimun width][long tag]type&quot;, VariableAddress);</code>.</p></li><li><p>Mark: <strong>-</strong> (align left, whitespace right), <strong>+</strong> (output signs), <strong>blank space</strong> (positive numbers with spaces, negative numbers with minus signs), <strong>#</strong> (formalize octal and hexadecimal numbers).</p></li><li><p>Long tag: <strong>h</strong> represents short integers and <strong>l</strong> represents long integers.</p></li><li><p>Type: <strong>d</strong> (decimal), <strong>o</strong> (octal), <strong>x</strong> (hexadecimal), <strong>f</strong> (float and double), <strong>e</strong> (scientific notation), <strong>c</strong> (char), <strong>s</strong> (string), <strong>p</strong> (address or pointer variable), <strong>g</strong> (only show significant digit).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculate the area of a circle</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number for the radius of a circle:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The area of circle is: %.2f.\n"</span>, M_PI * i * i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ol><li>Common functions about input and output<ul><li><code>int sscanf(const char *str, const char *format, ...);</code>: read its input from the character string pointed to by <em>str</em>. On success, it returns the number of input items successfully matched and assigned; this can be fewer than provided for, or even zero, in the event of an early matching failure. The value <strong>EOF</strong> is returned if the end of input is reached before either the first successful conversion or a matching failure occurs. <strong>EOF</strong> is also returned if a read error occurs, in which case the error indicator for the stream is set, and <em>errno</em> is set to indicate the error.</li><li><code>int sprintf(char *str, const char *format, ...);</code>: write its output to the character string pointed to by <em>str</em>. Upon successful return, it returns the number of characters printed (excluding the null byte used to end output to strings) and If an output error is encountered, a negative value is returned.</li><li><code>char *gets(char *s);</code>: read a line from <em>stdin</em> into the buffer pointed to by <em>s</em> until either a terminating newline or <strong>EOF</strong>, which it replaces with a null byte (<strong>\0</strong>). It return s on success, and <strong>NULL</strong> on error or when end of file occurs while no characters have been read. However, given the lack of buffer overrun checking, there can be no guarantees that the function will even return.</li><li><code>int puts(const char *s);</code>: write the string <em>s</em> and a trailing newline to <em>stdout</em>. It returns a nonnegative number on success, or <strong>EOF</strong> on error.</li><li><code>int getchar(void);</code>: equivalent to <u>fgetc</u>() except that it may be implemented as a macro which evaluates stream more than once. It returns the character read as an unsigned char cast to an int or <strong>EOF</strong> on end of file or error.</li><li><code>int putchar(int c);</code>: equivalent to <u>fputc</u>() except that it may be implemented as a macro which evaluates stream more than once. It returns the character written as an unsigned char cast to an int or <strong>EOF</strong> on error.</li><li>Common operation to clear the buffer<ul><li><code>{char c = 0; while((c = getchar()) != &#39;\n&#39; &amp;&amp; c != EOF);}</code> </li><li><code>int fflush(FILE *stream);</code>: it forces a write of all user-space buffered data for the given output or update stream via the stream’s underlying write function for output <em>streams</em>. And it discards any buffered data that has been fetched from the underlying file, but has not been consumed by the application for input streams associated with seekable files (e.g., disk files, but not pipes or terminals). Upon successful completion 0 is returned. Otherwise, <strong>EOF</strong> is returned and <em>errno</em> is set to indicate the error.</li></ul></li></ul></li></ol><h3 id="Read-only-Variable-and-Constant"><a href="#Read-only-Variable-and-Constant" class="headerlink" title="Read-only Variable and Constant"></a>Read-only Variable and Constant</h3><ol><li>Read-only variable: a unchanged variable and its format is <code>const DataType VariableName = Value</code>.</li><li>Read-only variable is a variable and it needs storage space, while constant not.</li></ol><h2 id="Conditional-Structure"><a href="#Conditional-Structure" class="headerlink" title="Conditional Structure"></a>Conditional Structure</h2><h3 id="If-then-else-Statement"><a href="#If-then-else-Statement" class="headerlink" title="If - then - else Statement"></a>If - then - else Statement</h3><ul><li><p>Conditional statements, conditional expressions and conditional constructs are features of a programming language, which perform different computations or actions depending on whether a programmer-specified boolean <em>condition</em> evaluates to true or false. Apart from the case of branch predication, this is always achieved by selectively altering the control flow based on some condition.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( expression ) statement;</span><br><span class="line"><span class="keyword">if</span>( expression ) statement; <span class="keyword">else</span> statement;</span><br><span class="line"><span class="keyword">if</span>( expression1 ) statement1; <span class="keyword">else</span> <span class="keyword">if</span>( expression2 ) statement2; ... <span class="keyword">else</span> statementn;</span><br><span class="line"><span class="keyword">and</span> nesting of <span class="keyword">if</span> statement;</span><br></pre></td></tr></table></figure><ul><li><p>Specially, <strong>ctype.h</strong> header file contains some useful functions like <code>int isalpha(int c)</code>, <code>int isdigit(int c)</code>, <code>int ispunct(int c)</code>, <code>int islower(int c)</code>, <code>int isupper(int c)</code>, <code>int isspace(int c)</code>, <code>int toupper(int c)</code> and <code>int tolower(int c)</code>. The values returned are nonzero if the character <em>c</em> falls into the tested class, and zero if not.</p></li><li><p>C and C-like languages have a special ternary operator (?:) for conditional expressions with a function that may be described by a template like this.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1?expression2:expression3</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Case-and-Switch-Statement"><a href="#Case-and-Switch-Statement" class="headerlink" title="Case and Switch Statement"></a>Case and Switch Statement</h3><ul><li><p>Switch statements (in some languages, case statements or multi-way branches) compare a given value with specified constants and take action according to the first constant to match. There is usually a provision for a default action (‘else’,’otherwise’) to be taken if no match succeeds. Switch statements can allow compiler optimizations, such as lookup tables. In dynamic languages, the cases may not be limited to constant expressions, and might extend to pattern matching, as in the shell script example on the right, where the ‘*)’ implements the default case as a regular expression matching any string.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>( expression --- the result must be integer )</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">case</span> constant expression1:  statement1; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant expression2: statement2; <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>: statementn; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implement bank function</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> balance = <span class="number">0.0f</span>, deposit, withdraw;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*** ACME checkbook-balancing program ***\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Commands: 0=clear, 1=deposit, 2=withdraw, 3=balance, 4=exit\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter command:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cmd);</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            balance = <span class="number">0.0f</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Clear finished!\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Enter amount of deposit: "</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;deposit);</span><br><span class="line">            balance += deposit;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Deposit finished!\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Enter amount of withdraw: "</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;withdraw);</span><br><span class="line">            <span class="keyword">if</span> (withdraw &gt; balance) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"No enough momey!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            balance -= withdraw;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Withdraw finished!\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Current balance: $%.2f\n"</span>, balance);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Commands: 0=clear, 1=deposit, 2=withdraw, 3=balance, 4=exit\</span></span><br><span class="line"><span class="string">n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Cycle-Structure"><a href="#Cycle-Structure" class="headerlink" title="Cycle Structure"></a>Cycle Structure</h2><h3 id="While-Statement"><a href="#While-Statement" class="headerlink" title="While Statement"></a>While Statement</h3><ul><li><p>A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( expression )&#123; loop body&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Do-while-Statement"><a href="#Do-while-Statement" class="headerlink" title="Do-while Statement"></a>Do-while Statement</h3><ul><li><p>A do while loop is a control flow statement that executes a block of code at least once, and then repeatedly executes the block, or not, depending on a given boolean condition at the end of the block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123; loop body &#125;<span class="keyword">while</span>( expression );</span><br></pre></td></tr></table></figure></li></ul><h3 id="For-Statement"><a href="#For-Statement" class="headerlink" title="For Statement"></a>For Statement</h3><ul><li><p>A for-loop (or simply for loop) is a control flow statement for specifying iteration, which allows code to be executed repeatedly. A for-loop has two parts: a header specifying the iteration, and a body which is executed once per iteration. The header often declares an explicit loop counter or loop variable, which allows the body to know which iteration is being executed. For-loops are typically used when the number of iterations is known before entering the loop. For-loops can be thought of as shorthands for while-loops which increment and test a loop variable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( expression1; expression2; expression3 ) &#123; loop body &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print pyramid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> line, i, j, k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input a number for the line:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = line - i; j &gt; <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">2</span> * i + <span class="number">1</span>; k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Specially, <strong>;</strong> can not be omitted while expression1, expression2 and expression3 can be omitted.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print the multiplication table</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d*%d=%02d "</span>, i, j, i * j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Jump-Statement"><a href="#Jump-Statement" class="headerlink" title="Jump Statement"></a>Jump Statement</h3><ul><li><p>It performs a one-way transfer of control to another line of code; in contrast a function call normally returns control. The jumped-to locations are usually identified using labels, though some languages use line numbers. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Functions: </span><br><span class="line">transfer control of the program <span class="keyword">and</span> changes the execution process of the program</span><br><span class="line"></span><br><span class="line"><span class="function">go <span class="title">to</span><span class="params">(unconditional jump, use with caution)</span></span></span><br><span class="line"><span class="function"><span class="title">break</span><span class="params">(jump out of the loop)</span></span></span><br><span class="line"><span class="function"><span class="title">continue</span><span class="params">(skip the remaining statements in the body of the loop <span class="keyword">and</span> get into the next loop)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print primes between 100 and 200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Primes between 100 and 200 are:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">201</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(i + <span class="number">1</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Operator-and-Expression"><a href="#Operator-and-Expression" class="headerlink" title="Operator and Expression"></a>Operator and Expression</h2><h3 id="Introduction-of-Operator"><a href="#Introduction-of-Operator" class="headerlink" title="Introduction of Operator:"></a>Introduction of Operator:</h3><ol><li><p>Classification of operators:</p><ul><li>Unary operator: <strong>&amp;</strong>, <strong>*</strong>, <strong>~</strong>, <strong>sizeof</strong>, <strong>()</strong></li><li>Binary operator: <strong>&gt;&gt;</strong>, <strong>&lt;&lt;</strong>, <strong>^</strong></li><li>Ternary operator: <strong>expression1?expression2:expression3</strong></li></ul></li><li><p>Arithmetic operator: <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, <strong>/</strong>, <strong>%</strong></p></li><li><p>Relational operator: <strong>&lt;</strong>, <strong>&gt;</strong>, <strong>&lt;=</strong>, <strong>&gt;=</strong>, <strong>==</strong>, <strong>!=</strong></p></li><li><p>Logical operator: <strong>!</strong>, <strong>&amp;&amp;</strong>, <strong>||</strong>, Short circuit rule: for <strong>&amp;&amp;</strong>, if the left operand is 0, the result must be 0, right</p></li></ol><p>operands will not be calculated; For <strong>||</strong>, if the left operand is not 0, then the result must be 1, and the right operand will not be calculated.</p><ol><li><p>Comma operator: <strong>expression1, expression2</strong></p></li><li><p>Bit operator: <strong>&amp;</strong>, <strong>|</strong>, <strong>~</strong>, <strong>^</strong>, <strong>&lt;&lt;</strong>, <strong>&gt;&gt;</strong></p></li><li><p>Assigning operator: <strong>=</strong>, <strong>+=</strong>, <strong>-=</strong>, <strong>*=</strong>, <strong>\/=</strong>, <strong>%=</strong>, a l-value must be a storage cell and a r-value must be a certain value.</p></li></ol><h3 id="Type-Conversion"><a href="#Type-Conversion" class="headerlink" title="Type Conversion"></a>Type Conversion</h3><ol><li><p>The classification of type conversion</p><ul><li>Implicit conversion<ul><li>Usage scenarios<ul><li>The types of operand in an arithmetic or logical expression are different.</li><li>The type of the expression on the right side of the assignment operator does not match the type of the variable on the left.</li><li>An actual parameter type in a function call does not match its formal parameter type.</li><li>The type of the expression in the return statement does not match the type of the return value of the function.</li></ul></li><li>The improvement of data type<ul><li>char, short $ \rightarrow$ int $\rightarrow$ unsigned int $\rightarrow$ long int $\rightarrow$ unsigned long int</li><li>float $\rightarrow$ double $\rightarrow$ long double</li><li>integer $ \rightarrow$ float</li><li>signed $ \rightarrow$ unsigned</li></ul></li></ul></li><li>Explicit conversion: <code>(TypeSpecifier)(expression)</code>.</li></ul></li><li><p>True code, complemental code and ones-complement code</p><ul><li><p>For the positive number: True code = complemental code = ones-complement code.</p></li><li><p>For the negative number: True code: the same as positive number’s. complemental code: reverse true code and plus one. ones-complement code: the sign bit stays the same, the number bit is reversed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swap the values of two integer variables</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d b:%d -before\n"</span>, a, b);</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d b:%d -after\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Basic-Knowledge-of-Function"><a href="#Basic-Knowledge-of-Function" class="headerlink" title="Basic Knowledge of Function"></a>Basic Knowledge of Function</h2><h3 id="Advantage-and-Classification-of-Function"><a href="#Advantage-and-Classification-of-Function" class="headerlink" title="Advantage and Classification of Function"></a>Advantage and Classification of Function</h3><ol><li>Advantages<ul><li>Make the program shorter and clearer.</li><li>Good for program maintenance.</li><li>Can improve the efficiency of code development.</li><li>Improve code reuse.</li></ul></li><li>Classifications<ul><li>Library function: provided by system, no need to be defined, must include header files.</li><li>User-defined function: need to be defined, and must be declared before in use.</li><li>Specially, the difference between inline function and macro with parameters is: When the function is called, control transfer will occur, and the code will be transferred to the function definition section and start running down. However, when the inline function is running to the function call, control transfer will not occur, but the function definition section will be directly copied down and run directly, which is defined as <code>inline DataType FunctionName();</code>.</li></ul></li></ol><h3 id="Definition-and-Calling-of-Function"><a href="#Definition-and-Calling-of-Function" class="headerlink" title="Definition and Calling of Function"></a>Definition and Calling of Function</h3><ol><li>Syntactic format for definition<ul><li>Function without parameters: <code>DataType FunctionName(){ statement };</code>.</li><li>Function with parameters: <code>DataType FunctionName( FormalParameterList ){ statement };</code>.</li><li>Specially, the type specifier indicates the return type of the function, and the content in <strong>{}</strong> is called the function body. If the function does not have return value, the return type is <strong>void</strong>, and it is not necessary to use the return statement; if it does, the return statement is required to return a value matching the return type.</li></ul></li><li>Syntactic format for calling: <code>FunctionName( ActualParameterList)</code>.</li><li>Actual parameter and formal parameter must be consistent in quantity, type and sequence. Specially, actual parameter must be determined value and the transfer is one-way( the formal $ \Rightarrow$ the actual ).</li><li>A nested call to a function: The calls to another function to occur within the definition of one function is allowed. No nested definitions of functions exist.</li></ol><h3 id="Concept-and-Declaration-of-Function-Prototype"><a href="#Concept-and-Declaration-of-Function-Prototype" class="headerlink" title="Concept and Declaration of Function Prototype"></a>Concept and Declaration of Function Prototype</h3><ol><li><p>Principle: first declare, then call and definitions cannot be repeated while declarations can.</p></li><li><p>Declaration of function prototype: the compilation system is notified of name and return type of the function, and number, type and sequence of the parameters, so that the statements containing the function calls can be checked against when compiled.</p></li><li><p>Usually a function can be declared in header files and defined in source files.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test the compilation of the header file</span></span><br><span class="line"><span class="comment">// include/test.h</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// src/test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input a number:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span> (!test(i)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"success!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failure\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="One-dimensional-Array"><a href="#One-dimensional-Array" class="headerlink" title="One-dimensional Array"></a>One-dimensional Array</h3><ol><li><p>Concept: organize several variables orderly whose type is the same. In computer memory, all elements of an array are stored in adjacent storage locations in the order of subscript. Array name is the unique identifier of an array, and array elements are represented by array name and subscript.</p></li><li><p>Definition of linear array: <code>DataType ArrayName[ConstantExpression];</code>.</p></li><li><p>Initialization of linear array</p><ul><li><p><code>DataType ArrayName[ConstantExpression] = {Value1, Value2, ..., Valuen}</code>: When <em>ConstantExpression</em> is omitted in initialization, the system allocate the size of the array according to the numbers of values.</p></li><li><p><code>ArrayName[n] = An arithmetic expression for n</code>.</p></li><li><p><code>for(...){scanf(&quot;string of format control&quot;, &amp;ArrayName[n]);}</code>.</p></li><li><p>When the array is partly initialized, the unassigned element is initialized to 0 by default.</p></li><li><p>If you assign values to all elements, the length of the array may not be specified in the array definition.</p></li></ul></li><li><p>Usage to linear array: <code>ArrayName[Subscript]</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enter a group of ages and count the age groups</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> persons[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input ages: "</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;persons[i]);</span><br><span class="line">    <span class="keyword">int</span> ages[<span class="number">11</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = persons[i] / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">10</span>)</span><br><span class="line">            ages[<span class="number">10</span>]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ages[k]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ages[%d]:%d\n"</span>, i, ages[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Two-dimensional-Array"><a href="#Two-dimensional-Array" class="headerlink" title="Two-dimensional Array"></a>Two-dimensional Array</h3><ol><li><p>Definition of two-dimensional array</p><ul><li><code>DataType ArrayName[ConstantExpression1][ConstantExpression2];</code>, thereamong the former represents row and the latter represents column. In C language, two-dimensional arrays are stored in rows with contiguous addresses.</li></ul></li><li><p>Initialization of two-dimensional array</p><ul><li>Row initializations can be omitted, but columns should never be omitted. Partial initializations are initialized to 0 by default.</li></ul></li><li><p>Usage of two-dimensional array: <code>ArrayName[RowSubscript][ColumnSubscript]</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print Yang Hui triangle</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">            a[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input row: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;row);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = row; k &gt; i; k--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || i == j)</span><br><span class="line">                a[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[i][j] = a[i - <span class="number">1</span>][j] + a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d"</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="High-Quality-Coding-Specification"><a href="#High-Quality-Coding-Specification" class="headerlink" title="High Quality Coding Specification"></a>High Quality Coding Specification</h2><h3 id="Macro-Coding-Specification"><a href="#Macro-Coding-Specification" class="headerlink" title="Macro Coding Specification"></a>Macro Coding Specification</h3><ol><li>Declaration of copyright and version<ul><li>Copyright information</li><li>File name, identifier and abstract</li><li>Current version, author or modifier and finish date</li><li>Version history information</li></ul></li><li>Structure of header file<ul><li>Declaration of copyright and version</li><li>Preprocess statements</li><li>Declaration of functions and structures</li></ul></li><li>Structure of source file<ul><li>Declaration of copyright and version</li><li>Including of header files</li><li>Data and code(Function annotation and statement annotation)</li></ul></li></ol><h3 id="Micro-Coding-Specification"><a href="#Micro-Coding-Specification" class="headerlink" title="Micro Coding Specification"></a>Micro Coding Specification</h3><ol><li>Usage of assert<ul><li><code>void assert(scalar expression);</code>: This macro can help programmers find bugs in their programs, or handle exceptional cases via a crash that will produce limited debugging output. If <em>expression</em> is false (i.e., compares equal to zero), it prints an error message to standard error and terminates the program by calling <u>abort</u>(). The error message includes the name of the file and function containing the its call, the source code line number of the call, and the text of the argument. And it is only used in debug version.</li></ul></li><li>Robustness of code must be considered when we apply for storage area in heap or use pointer.</li><li>Coding rule: Keep in mind that code is something to show people, not to show off.</li></ol><h2 id="Basic-Knowledge-of-Pointer"><a href="#Basic-Knowledge-of-Pointer" class="headerlink" title="Basic Knowledge of Pointer"></a>Basic Knowledge of Pointer</h2><h3 id="Introduction-of-Pointer"><a href="#Introduction-of-Pointer" class="headerlink" title="Introduction of Pointer"></a>Introduction of Pointer</h3><ol><li>Role of pointer<ul><li>Represent complex data structures effectively</li><li>Easy to use arrays and stings</li><li>Make function parameter passing more flexible</li><li>Able to deal with memory address</li></ul></li><li>Concept of pointer<ul><li>In computer science, a pointer is a programming language object that stores the memory address of another value located in computer memory. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer. As an analogy, a page number in a book’s index could be considered a pointer to the corresponding page; dereferencing such a pointer would be done by flipping to the page with the given page number and reading the text found on that page. The actual format and content of a pointer variable is dependent on the underlying computer architecture. Using pointers significantly improves performance for repetitive operations like traversing iterable data structures, e.g. strings, lookup tables, control tables and tree structures. In particular, it is often much cheaper in time and space to copy and dereference pointers than it is to copy and access the data to which the pointers point.</li><li>Pointer is a variable, whose value is the address of another variable it points to. And a pointer variable is simply called a pointer. </li></ul></li><li>Definition of pointer<ul><li>Format: <code>DataType* PointerName;</code>, where <em>DataType</em> represents type of variable which the pointer points to. </li><li>Size: No matter what a pointer point to, its size is the same as one machine word-length.</li></ul></li><li>Initialization of point<ul><li>Format: <code>PointName = NULL;</code>, where <em>NULL</em> is equal to zero and it indicates the pointer points to nothing. <code>PointerName = &amp;VariableNAme;</code>.</li><li>Of course, we can define and initialize at the same time.</li></ul></li><li>Addition and subtraction operation: We can move the pointer by add and sub operation.</li><li>Name of array<ul><li>Name of array is a storage cell address of the first element address in the array.</li><li>Name of array is a constant and disable to be reassigned.</li><li>We can get another element in the array using offset.</li></ul></li><li>Traversal method of array<ul><li>Subscript method: <code>ArrayName[Subscript]</code></li><li>Pointer method: <code>*(ArrayName+Subsript)</code></li></ul></li></ol><h3 id="Segmentation-Fault"><a href="#Segmentation-Fault" class="headerlink" title="Segmentation Fault"></a>Segmentation Fault</h3><ol><li>Concept and cause of segmentation fault<ul><li>In computing, a segmentation fault (often shortened to segfault) or access violation is a fault, or failure condition, raised by hardware with memory protection, notifying an operating system (OS) the software has attempted to access a restricted area of memory (a memory access violation). On standard computers, this is a form of general protection fault. The OS kernel will, in response, usually perform some corrective action, generally passing the fault on to the offending process by sending the process a signal. Processes can in some cases install a custom signal handler, allowing them to recover on their own, but otherwise the OS default signal handler is used, generally causing abnormal termination of the process (a program crash), and sometimes a core dump. Segmentation faults are a common class of error in programs written in languages like C that provide low-level memory access. They arise primarily due to errors in use of pointers for virtual memory addressing, particularly illegal access. Another type of memory access error is a bus error, which also has various causes, but is today much rarer; these occur primarily due to incorrect physical memory addressing, or due to misaligned memory access – these are memory references that the hardware cannot address, rather than references that a process is not allowed to address.</li><li>Common case: overwrite nil pointer, access a nonexistent memory location, access a system-protected memory location and modify variables in the constant area.</li></ul></li><li>Common ways to avoid segmentation fault<ul><li>Better to initialize variables when defining them</li><li>Do not overstep the boundary of any array </li><li>Avoid to overwrite some protected or nonexistent memory cell</li></ul></li></ol><h3 id="Function-Parameter-Passing"><a href="#Function-Parameter-Passing" class="headerlink" title="Function Parameter Passing"></a>Function Parameter Passing</h3><ol><li>Call by value<ul><li>A parameter acts within the subroutine as a new local variable initialized to the value of the argument.</li><li>Call by value (also referred to as pass by value) is the most common evaluation strategy, used in languages as different as C. In call by value, the argument expression is evaluated, and the resulting value is bound to the corresponding variable in the function (frequently by copying the value into a new memory region). If the function or procedure is able to assign values to its parameters, only its local variable is assigned — that is, anything passed into a function call is unchanged in the caller’s scope when the function returns.</li></ul></li><li>Call by reference<ul><li>The argument variable supplied by the caller can be affected by actions within the called subroutine. </li><li>Call by reference (also referred to as pass by reference) is an evaluation strategy where a function receives an implicit reference to a variable used as argument, rather than a copy of its value. This typically means that the function can modify (i.e. assign to) the variable used as argument—something that will be seen by its caller. Call by reference can therefore be used to provide an additional channel of communication between the called function and the calling function. A call-by-reference language makes it more difficult for a programmer to track the effects of a function call, and may introduce subtle bugs. A simple “litmus test” for whether a language supports call-by-reference semantics is if it’s possible to write a traditional <code>swap(a,b)</code> function in the language</li></ul></li></ol><h3 id="Multiple-Indirection"><a href="#Multiple-Indirection" class="headerlink" title="Multiple Indirection"></a>Multiple Indirection</h3><ol><li>Concept of multiple indirection: In some languages, a pointer can reference another pointer, requiring multiple dereference operations to get to the original value. While each level of indirection may add a performance cost, it is sometimes necessary in order to provide correct behavior for complex data structures. For example, in C it is typical to define a linked list in terms of an element that contains a pointer to the next element of the list. And a basic example is in the argv argument to the main function in C (and C++), which is given in the prototype as <code>char **argv</code>—this is because the variable <code>argv</code> itself is a pointer to an array of strings (an array of arrays), so <code>*argv</code> is a pointer to the 0th string (by convention the name of the program), and <code>**argv</code> is the 0th character of the 0th string.</li><li>Definition and initialization of pointers to pointers: <code>DataType** Pointer2Name = &amp;Pointer1Name;</code></li></ol><h3 id="Constant-Pointer-and-Pointer-Constant"><a href="#Constant-Pointer-and-Pointer-Constant" class="headerlink" title="Constant Pointer and Pointer Constant"></a>Constant Pointer and Pointer Constant</h3><ol><li>Concept of constant pointer: In short, it is a pointer to a constant and the variable value it points to can not be changed.</li><li>Definition of constant pointer: <code>DataType const *PointerName</code></li><li>Usage of constant pointer: It is usually used to deny to modify the variable value the arguments points to when calling function. </li><li>Concept of pointer constant: In short, it is a pointer whose value can’t be changed while the variable value it points to can be changed.</li><li>Definition of pointer constant: <code>DataType *const PointerName</code></li></ol><h2 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h2><h3 id="Generating-Random-Number"><a href="#Generating-Random-Number" class="headerlink" title="Generating Random Number"></a>Generating Random Number</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> a = rand()%<span class="number">90</span>+<span class="number">10</span>; <span class="comment">//represent 10~99</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Do-Not-Display-Password"><a href="#Do-Not-Display-Password" class="headerlink" title="Do Not Display Password"></a>Do Not Display Password</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* password;</span><br><span class="line">    password = getpass(<span class="string">"Input password:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The password is: %s\n"</span>, password);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic Knowledge </tag>
            
            <tag> C Language </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
